from Framework.Library.InOut_Module import InputModuleSample

class ModuleInput(InputModuleSample):
    IN_IP = []
    IN_DOMAIN = []
    RECON_PORTS = []
    RECON_SERVICES = []
    RECON_OS = []
    def __init__(self):
        self.IN_IP = []
        self.IN_DOMAIN = []
        self.RECON_PORTS = []
        self.RECON_SERVICES = []
        self.RECON_OS = []

    def try_parse(self, data_json):
        try:
            self.IN_IP = data_json['IN_IP']
            self.IN_DOMAIN = data_json['IN_DOMAIN']
            self.RECON_PORTS = data_json['RECON_PORTS']
            self.RECON_SERVICES = data_json['RECON_SERVICES']
            self.RECON_OS = data_json['RECON_OS']


        except Exception as e:
            print("Error read data metasploitAI", e)
            return False
        return True

    def to_json(self):
        data_json = {
            "IN_IP"    :    self.IN_IP,
            "IN_DOMAIN"        : self.IN_DOMAIN,
            "RECON_PORTS"        : self.RECON_PORTS,
            "RECON_SERVICES"        : self.RECON_SERVICES,
            "RECON_OS"        : self.RECON_OS

            
        }
        return data_json
    def default_format(self):
        data_json = {
            "IN_IP"    :    self.IN_IP,
            "IN_DOMAIN"        : self.IN_DOMAIN,
            "RECON_PORTS"        : self.RECON_PORTS,
            "RECON_SERVICES"        : self.RECON_SERVICES,
            "RECON_OS"        : self.RECON_OS

            
        }
        return data_json
    def freeze(self, l):

        answer = []
        for d in l:
            if not d in answer: 
                answer.append(d)
        return answer

    def extend(self, object):
        self.IN_IP.extend(object.IN_IP)
        self.IN_DOMAIN.extend(object.IN_DOMAIN)
        self.RECON_PORTS.extend(object.RECON_PORTS)
        self.RECON_SERVICES.extend(object.RECON_SERVICES)
        self.RECON_OS.extend(object.RECON_OS)
        self.remove_duplicate()
    def remove_duplicate(self):
        self.IN_IP = self.freeze(self.IN_IP)
        self.IN_DOMAIN = self.freeze(self.IN_DOMAIN)
        self.RECON_PORTS = self.freeze(self.RECON_PORTS)
        self.RECON_SERVICES = self.freeze(self.RECON_SERVICES)
        self.RECON_OS = self.freeze(self.RECON_OS)