#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json
from Framework.Valueconfig import ValueStatus, FOLDER_FRAMEWORK_ROOT

from sys import path
from urllib.parse import urlsplit
import requests


from Framework.Library.Module import Module, Status
from Framework.Library.Exploit.MetasploitAI.output import ModuleOutput
from Framework.Library.Exploit.MetasploitAI.input import ModuleInput



class ModuleFramework(Module):
    name = "MetasploitAI"
    type_module = "Module_Exploit"
    API_Start_Exploit = '/api/autoExploit'
    API_Status_Exploit = '/api/checkIsCompleted'
    API_Result_Exploit = '/api/getResult'
    Cf_Metasploit_AI_Host = ""
    Cf_Metasploit_AI_Port = ""
    path_input_class = "/input.py"
    path_output_class = "/output.py"
    ans = []
    url = ''
    filename = 'metasploit_ai.py'
    path_log = ""
    input_module = None
    config_module = None
    status = ''
    result_of_other_tool = {}
    list_tool_run = []


    def __init__(self):
        self.status = ValueStatus.Creating
        
    def info(self):
        result = {}
        result['name'] = self.name
        result['typemodule'] = self.type_module
        result['type'] = "offline"
        result['version'] = "1.0"
        return result

    def start(self):
        if self.status != ValueStatus.Creating:
            return False
        print("Start" , self.name)
        self.status = ValueStatus.Running
        try:
            data_post = self.input_module.to_json()
            #data_post = 
            result_request = self.request_to_server_metasploit_ai(data_post, "POST", self.API_Start_Exploit)
            if result_request == False:
                raise Exception("Request to server Metasploit fail")
            id_session = result_request['data']['id']
            data_status = {
                "id" : id_session
            }
            while (True):
                result_request = self.request_to_server_metasploit_ai(data_status, "GET", self.API_Status_Exploit)
                if result_request == False:
                    self.status = ValueStatus.Error
                    raise Exception("Request to server Metasploit fail")
                if result_request['data'] == 'Running':
                    import time
                    time.sleep(1)
                else:
                    break
            result_request = self.request_to_server_metasploit_ai(data_status, "GET", self.API_Result_Exploit)
            if result_request == False:
                raise Exception("Request to server Metasploit fail")
            self.output_module = ModuleOutput()
            result_request=  result_request['data']
            self.output_module.EXPLOIT_METASPLOIT_AI.extend(result_request)
            self.status = ValueStatus.Success
        except Exception as e:
            print("Error run metasploit", e)
            self.status = ValueStatus.Error
        pass

    def get_status(self):
        return self.status
    def set_input_module(self, input):
        try:
            self.input_module = ModuleInput()
            list_data = input['Module_Reconnaissance']
            if not isinstance(list_data, list):
                list_data = [list_data]

            for data in list_data:
                temp_module = ModuleInput()
                temp_module.try_parse(data)
                self.input_module.extend(temp_module)
        except Exception as e:
            print("Error get input for metasploit AI", e)
    def get_output_module(self):
        return self.output_module
    def set_config_module(self, config):
        self.config_module = config
        self.Cf_Host_Check_Metasploit_AI = self.config_module['Cf_Host_Check_Metasploit_AI']

    def request_to_server_metasploit_ai(self, data, method, link):
        url = self.Cf_Host_Check_Metasploit_AI  + link
        header = {
            "Content-type" : "application/x-www-form-urlencoded"
        }

        data =  data
        param =  data

        if method == "GET" : 
            data = {}
            header = {}
        else: 
            param = {}
        try:
            req = requests.request(method=method, url=url, data =data,params=param, headers= header )
            if  req.status_code  == 200:
                try:
                    data_json = json.loads(req.text)
                    return data_json
                except:
                    pass
        except Exception as e:
            print("Connect server error: ", self.Cf_Host_Check_Metasploit_AI, )
        return False

if __name__ == "__main__": 
      
    pass