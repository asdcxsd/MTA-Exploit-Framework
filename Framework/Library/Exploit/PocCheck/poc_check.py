#!/usr/bin/env python
# -*- coding: utf-8 -*-
from copy import Error
from Framework.Valueconfig import ValueStatus, FOLDER_FRAMEWORK_ROOT
import os
from datetime import date
import re
from sys import path
from urllib.parse import urlsplit
import hashlib
import os, datetime, binascii
import shutil, json
import random, string
from subprocess import Popen, PIPE, STDOUT
import xmltodict
from Framework.Library.Module import Module
from Framework.Library.Exploit.PocCheck.output import ModuleOutput
from Framework.Library.Exploit.PocCheck.input import ModuleInput
from Framework.Library.Function.POC import POC


class ModuleFramework(Module):
    name = "PocCheck"
    type_module = "Module_Exploit"
    path_input_class = "/input.py"
    path_output_class = "/output.py"
    ans = []
    url = ''
    filename = 'poc_check.py'
    path_log = ""
    input_module = None
    config_module = None
    status = ''
    result_of_other_tool = {}
    tempPOC = POC()

    def __init__(self):
        self.status = ValueStatus.Creating
        
    def info(self):
        result = {}
        result['name'] = self.name
        result['typemodule'] = self.type_module
        result['type'] = "offline"
        return result
    def get_all_pocs(self):
        return self.tempPOC.get_all_pocs()
    def get_info_pocs(self, name_poc):
        return self.tempPOC.get_info_poc(name_poc)
    def start(self):
        # run 
        self.status = ValueStatus.Running
        try:
            objectPOC = POC()
            objectPOC.set_input(self.input_module)
            objectPOC.set_config(self.config_module)
            
            objectPOC.run()
            while True:
                status = objectPOC.get_status()
                if status == ValueStatus.Success or status == ValueStatus.Error:
                    break
            resultScan = objectPOC.result()
            self.output_module = ModuleOutput()
            self.output_module.EXPLOIT_POCS = resultScan
            self.status = ValueStatus.Success
        except Exception as e:
            print("Exception: ", self.name, e)
            self.status = ValueStatus.Error
    def get_status(self):
        return self.status
    def set_input_module(self, input):
        try:
            self.input_module = ModuleInput()
            list_data = input['Module_Reconnaissance']
            if not isinstance(list_data, list):
                list_data = [list_data]

            for data in list_data:
                temp_module = ModuleInput()
                temp_module.try_parse(data)
                self.input_module.extend(temp_module)
        except Exception as e:
            print("Error get input for PocCheck", e)
    def get_output_module(self):
        return self.output_module




if __name__ == "__main__": 
      
    pass