#!/usr/bin/env python
# -*- coding: utf-8 -*-
from configvalue import FOLDER_POCS
from copy import Error
from enum import Flag
import zipfile
from Framework.Valueconfig import ValueStatus, FOLDER_FRAMEWORK_ROOT
import os
from datetime import date
import re
from sys import path
from urllib.parse import urlsplit
import hashlib
import os, datetime, binascii
import shutil, json
import random, string
from subprocess import Popen, PIPE, STDOUT
import xmltodict
from Framework.Library.Module import Module
from Framework.Library.Exploit.PocCheck.output import ModuleOutput
from Framework.Library.Exploit.PocCheck.input import ModuleInput
from Framework.Library.Function.POC import POC


class ModuleFramework(Module):
    name = "PocCheck"
    type_module = "Module_Exploit"
    path_input_class = "/input.py"
    path_output_class = "/output.py"
    ans = []
    url = ''
    filename = 'poc_check.py'
    path_log = ""
    input_module = None
    config_module = None
    status = ''
    result_of_other_tool = {}
    tempPOC = POC()

    def __init__(self):
        self.status = ValueStatus.Creating
        
    def info(self):
        result = {}
        result['name'] = self.name
        result['typemodule'] = self.type_module
        result['type'] = "offline"
        return result
    def get_all_pocs(self):
        return self.tempPOC.get_all_pocs()
    def get_info_pocs(self, name_poc):
        return self.tempPOC.get_info_poc(name_poc)
    def start(self):
        # run 
        self.status = ValueStatus.Running
        try:
            objectPOC = POC()
            objectPOC.set_input(self.input_module)
            objectPOC.set_config(self.config_module)
            objectPOC.run()
            while True:
                status = objectPOC.get_status()
                if status == ValueStatus.Success or status == ValueStatus.Error:
                    break
            resultScan = objectPOC.result()
            self.output_module = ModuleOutput()
            self.output_module.EXPLOIT_POCS = resultScan
            self.status = ValueStatus.Success
        except Exception as e:
            print("Exception poc check: ", self.name, e)
            self.status = ValueStatus.Error
    def get_status(self):
        return self.status
    def set_input_module(self, input):
        try:
            self.input_module = ModuleInput()
            list_data = input['Module_Reconnaissance']
            if not isinstance(list_data, list):
                list_data = [list_data]

            for data in list_data:
                temp_module = ModuleInput()
                temp_module.try_parse(data)
                self.input_module.extend(temp_module)
        except Exception as e:
            print("Error get input for PocCheck", e)
    def get_output_module(self):
        return self.output_module

    def import_pocs(self, pathfile):
        try:

            zipfile = unzip_file(pathfile, pathfile.rsplit("/", 1)[0] + "/")
            folder = zipfile.unzipfolder()
            importTool = ImportTool(folder)
            status = importTool.check_exist()
            if status:
                importTool.copy_file_poc()
                if importTool.have_Init():
                    importTool.copy_Init_file()
                importTool.run_requirement()

        except Exception as e:
            raise e
        finally: 
            del zipfile
        return status

class unzip_file:
    source = ''
    destination = ''
    def __init__(self, source, destination):
        self.source = source
        self.destination = destination
    def __del__(self):
        try:
            shutil.rmtree(self.source[:-4])
        except Exception as e:
            raise e 

    def unzipfolder(self):
        #unzip file to folder session/
        try:
        
            with zipfile.ZipFile(self.source, 'r') as zip_ref:
                zip_ref.extractall(self.destination)
            return self.destination
        except Exception as e :
            raise e

class ImportTool():
    config_poc = {}
    def __init__(self, folder):
        self.folder = folder
        try:
            with open(folder + "config-poc.json", "r") as file:
                data = file.read();
                data_json = json.loads(data)
            self.config_poc = data_json
            self.tempPOC = POC()
        except Exception as e:
            print(e)
    def check_exist(self):
        
        if self.config_poc['Name'] in self.tempPOC.get_all_pocs():
            return False
        
        return True

    def copy_file_poc(self):
        try:
            if os.path.isfile(FOLDER_POCS + self.config_poc['File_Poc']):
                raise Exception("Tools exist!")
            shutil.copyfile(self.folder + self.config_poc['File_Poc'], FOLDER_POCS + self.config_poc['File_Poc'])
        except Exception as e:
            print("Error copy file poc:", e)
    def copy_Init_file(self):
        try:
            folder_init = self.folder + self.config_poc['Folder_Init']
            shutil.copytree(folder_init, FOLDER_POCS + "../init_tools/" + self.config_poc['Folder_Init'])
        except Exception as e:
            print("Error copy folder init:", e)
    def run_requirement(self):
        try:
            if self.config_poc['Requirements'] ==None:
                return
            with self.remember_cwd(): 
                os.chdir(self.folder) 
                os.system("python3 -m pip install -r " +  self.config_poc['Requirements']);
        except Exception as e:
            print("Error run requirement tool" , e)
            raise e
        return True
    def have_Init(self):
        return self.config_poc['Init_Folder'] != None
    
    def remember_cwd():
        curdir= os.getcwd()
        try: yield
        finally: os.chdir(curdir)
if __name__ == "__main__": 
      
    pass