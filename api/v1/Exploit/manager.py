

#from Library.Exploit.manager_pocs import function_delete_poc, function_get_infomation, function_get_infomation_of_poc, function_import_poc
#from Library.Exploit.POCURI import POCURI
import os
from api.v1.uploadfile import allowed_file

from configvalue import  UPDATE_FOLDER_POCS, UPLOAD_FOLDER_TOOLS , ALLOWED_EXTENSIONS
from flask import Blueprint, Response, request
from api.v1.output import make_output


ManagerExploit = Blueprint('managetexploit', __name__)
import xml.etree.ElementTree as ET


@ManagerExploit.route('/info_poc', methods=['GET'])
def request_get_info_list_poc():
    try:
        result = function_get_infomation()

        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    except Exception as e:
        return Response(make_output(message =  "fail", data= str(e)), mimetype="application/json", status=404)

@ManagerExploit.route('/detail_poc', methods=['GET'])
def request_get_detail_poc():
    try:
        namepoc  = request.args['namepoc']
        result = function_get_infomation_of_poc(namepoc)
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    except Exception as e:
        return Response(make_output(message =  "fail", data= str(e)), mimetype="application/json", status=404)


@ManagerExploit.route('/listpocs', methods=['GET'])
def get_all_tools():
    CPOC = POCURI()
    result = CPOC.get_all_pocs()    
    if not isinstance(result, str):
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= result ), mimetype="application/json", status=404)

@ManagerExploit.route('/import_poc', methods=['POST'])
def request_import_poc():
    try:
      
        file = request.files['file']
   
        if file.filename == '':
            raise Exception("Namefile not null")
        filename = file.filename
        if file and allowed_file(file.filename):
            
            file.save(os.path.join(UPDATE_FOLDER_POCS, filename))
        else:
            raise Exception("File upload error")
        status = function_import_poc(filename)
        return Response(make_output(data = status, message ='success'), mimetype="application/json", status=200)
    except Exception as e:
        return Response(make_output(message =  "fail", data= str(e)), mimetype="application/json", status=404)


@ManagerExploit.route('/removepoc', methods=['DELETE'])
def remove_poc():
    try:
        result = function_delete_poc(request.form['namepoc'])
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    except Exception as e:
        return Response(make_output(message =  "fail", data= str(e) ), mimetype="application/json", status=404)
