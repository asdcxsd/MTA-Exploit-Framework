
from datetime import datetime
import random
import string
from flask import Blueprint, Response, request
from pymongo import results
from Database.database import get_exploit_cve, get_pocs_with_id, reconnaissance
from api.v1.output import make_output
from Library.Exploit.POCURI import POCURI
Poc = Blueprint('Poc', __name__)
import xml.etree.ElementTree as ET
from threading import Thread
from Library.Target.target import Target, get_target_url
from Library.Exploit.runpoc import run_scan
from Library.Reconnai.reconnaissance import Reconnaissance
from Tools.ToolExploit.openport import openport


@Poc.route('/get', methods=['GET'])
def get_answer_poc():
    data_filter = {}
    if ("target_id" in request.args):
        data_filter['target_id'] = request.args['target_id']
    [status, data] = get_exploit_cve(data_filter)
    result = []
    for i in range(data.count()):
        temp = data[i];
        temp['_id'] = str(temp['_id'])
        add_new = True
        for j  in range(len(result)):
            check_duplicate = result[j]
            if temp['app_name'] == check_duplicate['app_name']:
                if temp['date_check'] > check_duplicate['date_check']: 
                    result[j] = temp
                add_new = False
        if add_new: result.append(temp)

    if status:
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= result ), mimetype="application/json", status=404)

@Poc.route('/getall', methods=['GET'])
def get_all_answer_poc():
    [status, data] = get_exploit_cve({})
    result = []
    for i in range(data.count()):
        temp = data[i];
        temp['_id'] = str(temp['_id'])
        result.append(temp)
    if status:
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= result ), mimetype="application/json", status=404)



def checkpoc_run(recon, pocs, exploit_id):
    
    check_pocs = run_scan(recon = recon, pocenable = pocs)
    check_pocs.run()
    update_status_checkpoc_running(_id=exploit_id, status="success")
global checkpoc_running 
checkpoc_running = []
def update_status_checkpoc_running(_id, status, recon_id=None, target_id =None, runthread=None,  expoit_id="No"):
    global checkpoc_running
    if _id in [_['_id'] for _ in checkpoc_running]:
        #update 
        vt = [_['_id'] for _ in checkpoc_running].index(_id)
        checkpoc_running[vt]['exploit_id']  = expoit_id 
        checkpoc_running[vt]['status'] = status
    else: 
        date =  datetime.now().strftime("%d/%m/%Y %H:%M:%S") 
        checkpoc_running.append({"_id": _id, "thread": runthread, "target_id": target_id, 'recon_id':recon_id ,  'exploit_id': expoit_id,  'date': date, "status": status})
    

@Poc.route('/start', methods=['PUT'])
def request_put_runpoc():
    recon_id = request.form['recon_id']
    if 'pocrun' in request.form:
        run_pocs = request.form['pocrun']
    else: 
        run_pocs = '*telerik_cve_2019_18935*'
    global checkpoc_running
    recon = Reconnaissance()
    status = recon.update_reconid(recon_id)
    if status :

        _id_session = ''.join(random.choices(string.ascii_lowercase + string.digits, k=32))
        runthread = Thread(target=checkpoc_run, args=(recon, run_pocs, _id_session ))
        runthread.start()
        update_status_checkpoc_running(_id=_id_session, status="running", target_id=recon.target_id, runthread=runthread, recon_id=recon_id)
        return Response(make_output(data = "start check poc susscess", message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= str(status) ), mimetype="application/json", status=404)

@Poc.route('/status', methods=['GET'])
def request_status_runpoc():
    global checkpoc_running
    result = []
    
    for run in checkpoc_running:
        result.append({'_id': run['_id'] , 'recon_id': run['recon_id'], 'date' : run['date'], "status" : run['status']})
    if len(result) :
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= "No data" ), mimetype="application/json", status=404)
