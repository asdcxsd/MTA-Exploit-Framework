
from datetime import datetime
import string
from flask import Blueprint, Response, request
from pymongo import results
from Database.database import get_exploit_cve, get_pocs_with_id, reconnaissance
from api.v1.output import make_output
from Library.Exploit.POCURI import POCURI
Shell = Blueprint('Shell', __name__)
import xml.etree.ElementTree as ET
from threading import Thread
from Library.Target.target import get_target_url
from Library.Exploit.runpoc import run_scan
from Library.Reconnai.reconnaissance import Reconnaissance
from Tools.ToolExploit.openport import openport


def pocrun_shell(data, datashellrequest):
    if "LPORT" in datashellrequest:
        LPORT = datashellrequest['LPORT']
    else: LPORT = 4444
    if "LHOST" in datashellrequest:
        LHOST = datashellrequest['LHOST']
    else: LHOST = "13.76.188.147"
    try:
        openp = openport(LHOST, LPORT)
        #status = openp.check_connect(60)
        threop = Thread(target=openp.check_connect, args=(60,))
        threop.start()
    except Exception as e:
        print("Error open port", e)
    recon_id = data['recon_id']
    recon = Reconnaissance()
    recon.update_reconid(recon_id)
    check_pocs = run_scan(recon=recon)
    check_pocs.run_poc(data, datashellrequest)

global poc_running 
poc_running = []

@Shell.route('/runshell', methods=['PUT'])
def request_runshell():
    try:
        requentdata = request.json
        checkpoc_id =requentdata['checkpoc_id']
        if 'data' in requentdata:
            runshell_data = requentdata['data']
        else: 
            runshell_data = {}

        global poc_running
        [status, data] = get_pocs_with_id(checkpoc_id)
        if status :
            runthread = Thread(target=pocrun_shell, args=(data, runshell_data ))
            runthread.start()
            poc_running.append({"thread": runthread, "pocs_id": checkpoc_id, "date": datetime.now().strftime("%d/%m/%Y %H:%M:%S") })
            return Response(make_output(data = "start poc susscess", message ='success'), mimetype="application/json", status=200)
        else:
            return Response(make_output(message =  "fail", data= str(status) ), mimetype="application/json", status=404)
    except Exception as e:
        print("Error run shell", e)
        return Response(make_output(message =  "fail", data= str(e) ), mimetype="application/json", status=404)

@Shell.route('/status_shell', methods=['GET'])
def request_status_runpocshell():
    global poc_running
    result = []
    for run in poc_running:
        if run['thread'].isAlive():
            result.append({'pocs_id': run['pocs_id'], 'date' : run['date'], 'status': 'running'})
        else:
            result.append({'pocs_id': run['pocs_id'], 'date' : run['date'], 'status': 'success'})
    if len(result) :
        return Response(make_output(data = result, message ='success'), mimetype="application/json", status=200)
    else:
        return Response(make_output(message =  "fail", data= "No data" ), mimetype="application/json", status=404)

