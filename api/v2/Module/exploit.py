from bson import json_util
from bson.objectid import ObjectId
from flask import Blueprint, Response, request
from api.v1.output import make_output
from api.v2.Module.recon import find_date_record
from datetime import datetime
import json
from bson.json_util import dumps
from Application.run import delete_data_in_database, dump_all_data_from_db
from Application.Function.Connect_Database import get_exploit_cve, delete_exploit_cve
Exploit = Blueprint("Exploit", __name__)

@Exploit.route('/getall', methods=['GET'])
def get_all_poc_check(): 
    try: 
        [status, data] = get_exploit_cve({})
        if status: 
            result = []
            for cur in data: 
                temp = json.loads(dumps(cur))
                temp['_id'] = temp['_id']['$oid']
                process_id = temp["_id_process"]
                temp["date_start"], temp["date_end"] = find_date_record({"_id": ObjectId(process_id)})
                data_from_db = dump_all_data_from_db("Module_Exploit", temp["_id"])
                temp["target_ip"] = data_from_db["IN_IP"]
                temp["target_domain"] = data_from_db["IN_DOMAIN"]
                result.append(temp)
            return Response(make_output(data=result, message="success"), mimetype='application/json', status=200)
        else: 
            raise Exception("Can't get module exploit")
    except Exception as e: 
        return Response(make_output(data=str(e), message="fail"), mimetype="application/json", status=404)

@Exploit.route("/get", methods=['POST'])
def get_answer_poc(): 
    try: 
        if "_id_process" in request.form: 
            _id_process = request.form['_id_process']
            query = {}
            query['_id_process'] = _id_process
            status, data = get_exploit_cve(query)
            if status: 
                data = data[0]
            result = json.loads(dumps(data))
            result["date_start"], result["date_end"] = find_date_record({"_id": ObjectId(result["_id_process"])})
            data_from_db = dump_all_data_from_db("Module_Exploit", result['_id']['$oid'])
            result["target_ip"] = data_from_db["IN_IP"]
            result["target_domain"] = data_from_db["IN_DOMAIN"]
            result['_id'] = result["_id"]['$oid']
            return Response(make_output(data=result, message="success"), mimetype="application/json", status=200)
        else: 
            raise Exception("invalid process id")
    except Exception as e: 
        return Response(make_output(data=str(e), message="fail"), mimetype="application/json", status=404)


@Exploit.route("/getlastexploit", methods=['POST'])
def get_last_exploit_cve(): 
    try: 
        query = {}
        if "target_ip" in request.form: 
            query["IN_IP"] = request.form['target_ip']
        status, data = get_exploit_cve({})
        if status: 
            lasttime = datetime.strptime("01/01/1970T00:00:00","%d/%m/%YT%H:%M:%S")
            for i in data: 
                data_temp = json.loads(dumps(i))
                data_temp['date_start'], data_temp['date_end'] = find_date_record({'_id': ObjectId(str(i['_id_process']))})
                time_check = datetime.strptime(data_temp['date_end'],"%d/%m/%YT%H:%M:%S")
                if time_check > lasttime: 
                    lasttime = time_check
                    module_exploit_id = str(i["_id"])
                    data_from_db = dump_all_data_from_db("Module_Exploit", module_exploit_id)
                    if query["IN_IP"] == data_from_db["IN_IP"][0]: 
                        data_temp["target_ip"] = data_from_db["IN_IP"]
                        data_temp["target_domain"] = data_from_db["IN_DOMAIN"]
                        result = data_temp
                        result["_id"] = str(result["_id"])
            return Response(make_output(data=result, message="success"), mimetype="application/json", status=200)
        else : 
            raise Exception("No exploit record found")

    except Exception as e: 
        return Response(make_output(data=str(e), message="fail"), mimetype="application/json", status=404)

@Exploit.route("/delete", methods=["DELETE"])
def delete_exploit_poc_record(): 
    try: 
        if "_id_process" in request.form: 
            _id_process = request.form['_id_process']
            query = {}
            query['_id_process'] = _id_process
            status, data = get_exploit_cve(query)
            if status: 
                data = data[0]
            result = json.loads(dumps(data))
            module_exploit_id = result["_id"]['$oid']

            status = delete_data_in_database("Module_Exploit", module_exploit_id)
            if not status:
                raise Exception("do not have that record")
            return Response(make_output(data="delete record success", message="success"), mimetype="application/json", status=200)

    except Exception as e :
        return Response(make_output(data=str(e), message="fail"), mimetype="application/json", status=404)