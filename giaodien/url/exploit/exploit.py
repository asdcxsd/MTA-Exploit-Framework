from flask import Flask, render_template, request, session, jsonify, redirect, url_for,escape, Blueprint, Response
from functools import wraps
import requests
from .. import const
import json
import time
import random
from datetime import datetime

Exploit = Blueprint('Exploit', __name__)

def login_required(func): 
    @wraps(func)
    def wrapper(*args, **kwargs): 
        if not "logged_in" in session: 
            return redirect(url_for('Login.login'))
        elif not session['logged_in']: 
            return redirect(url_for('Login.login'))
        else: 
            return func(*args, **kwargs)
    wrapper.__name__ = func.__name__
    return wrapper
@Exploit.route('/shell')
@login_required
def shell(): 
    return render_template('shell.html')

@Exploit.route("/exploit", methods=['GET'])
@login_required
def exploit(): 
    return render_template("exploit.html")

@Exploit.route('/getallexploit', methods=['GET'])
@login_required
def get_all_exploit_request(): 
    res = requests.get(const.PUBLIC_API + "/api/v2/exploit/getall")
    print(res.text)
    return res.json()

@Exploit.route("/getexploitdetail", methods=['POST'])
@login_required
def get_detail_expploit_request(): 
    if "_id_process" in request.form:
        param = {
            "_id_process": request.form['_id_process']
        }
        res = requests.post(const.PUBLIC_API + "/api/v2/exploit/get", data=param)
        return res.json()

@Exploit.route('/deleteexploit', methods=['DELETE'])
@login_required
def delete_exploit_request(): 
    if "_id_process" in request.form: 
        param = {
            "_id_process": request.form['_id_process']
        }
        res = requests.delete(const.PUBLIC_API + "/api/v2/exploit/delete", data=param)
        return res.json()

@Exploit.route("/runshell", methods=['POST'])
@login_required
def run_shell_request(): 
    raw_id = {}
    raw_id['Input'] = []
    config_module = {}
    config_module['module'] = "ConfigSetup"
    config_module["_id"] = session['config_id']
    raw_id['Input'].append(config_module)
    if "Module_Exploit" in request.form: 
        target_module = {}
        target_module['module'] = "Module_Exploit"
        target_module['_id'] = request.form['Module_Exploit']
        raw_id['Input'].append(target_module)
    raw_id['Module'] = []
    if "POC" in request.form: 
        raw_id["Priority"] = {}
        raw_id["Priority"]["EXPLOIT_POCS"] = {}
        raw_id["Priority"]["EXPLOIT_POCS"]["POC"] = request.form['POC']
        raw_id['Module'].append("OutputShell")
    if "Metasploit" in request.form: 
        raw_id['Module'].append("OutputMetasploit")
    param = {
        "name": "test_running", 
        "input_raw_id": json.dumps(raw_id)
    }
    res = requests.post(const.PUBLIC_API + "/api/v2/module/run", data=param)
    return res.json()



@Exploit.route("/getshellstatus", methods=['GET'])
@login_required
def get_shell_status(): 
    if "process_id" in request.args: 
        param = {
            "_id": request.args['process_id']
        }
        res = requests.get(const.PUBLIC_API + "/api/v2/module/status", params=param)
        result = res.json()
        if(result['message'] == "success"): 
            temp = result['data']
            if(temp['Status'] != "StatusSuccess"): 
                return res.json()
            else: 
                data = {
                    "process_id": request.args['process_id']
                }
                res = requests.post(const.PUBLIC_API + "/api/v2/shell/getshelllogstatus",data=data)
                if "Success" in res.text: 
                    res1 = requests.post(const.PUBLIC_API + "/api/v2/shell/getinforsevershell",data=data)
                    temp = res1.json()
                    session["Server_REV"] = temp['data']["Server_REV"]
                    session['id_connect'] = temp['data']['id_connect']
                return res.json()


def get_data(shellServer, shell_id): 
    while True:
        param = {
            "id": shell_id, 
            "length": 4096 
        }
        res = requests.get(shellServer + "/receive", params=param)
        # print(res.text)
        # result = res.text.replace("\n", "\t")
        # print(res.text)
        data = json.dumps({"data": res.text})
        print(data)
        yield f"data:{data}\n\n"

@Exploit.route('/getshelldata', methods=['GET'])
@login_required
def get_shell_data_request():   
    shellServer = session["Server_REV"]
    shell_id =  session['id_connect']
    return Response(get_data(shellServer, shell_id), mimetype='text/event-stream; charset=utf-8')

@Exploit.route("/sendshelldata", methods=['POST'])
@login_required
def send_shell_command_request(): 
    if "cmd" in request.form: 
        message = request.form['cmd']
    shellServer = session["Server_REV"]
    shell_id = session['id_connect']
    param = {
        "id": shell_id, 
        "message": message
    }
    res = requests.get(shellServer + "/send", params=param)
    return res.text



@Exploit.route("/closeshell", methods=['GET'])
@login_required
def send_close_shell_request(): 
    shellServer = session["Server_REV"]
    shell_id = session['id_connect']
    param = {
        "id": shell_id, 
    }
    res = requests.get(shellServer + "/closeConnection", params=param)
    print(res.text)
    return res.text