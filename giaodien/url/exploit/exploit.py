from flask import Flask, render_template, request, session, jsonify, redirect, url_for,escape, Blueprint, Response
from functools import wraps
import requests
from .. import const
import json
import time
import random
from datetime import datetime

Exploit = Blueprint('Exploit', __name__)

def login_required(func): 
    @wraps(func)
    def wrapper(*args, **kwargs): 
        if not "logged_in" in session: 
            return redirect(url_for('Login.login'))
        elif not session['logged_in']: 
            return redirect(url_for('Login.login'))
        else: 
            return func(*args, **kwargs)
    wrapper.__name__ = func.__name__
    return wrapper
@Exploit.route('/shell')
@login_required
def shell(): 
    return render_template('shell.html')

@Exploit.route("/exploit", methods=['GET'])
@login_required
def exploit(): 
    return render_template("exploit.html")

@Exploit.route('/getallexploit', methods=['GET'])
@login_required
def get_all_exploit_request(): 
    res = requests.get(const.PUBLIC_API + "/api/v2/exploit/getall")
    return res.json()

@Exploit.route("/getexploitdetail", methods=['POST'])
@login_required
def get_detail_expploit_request(): 
    if "exploit_id" in request.form:
        param = {
            "exploit_id": request.form['exploit_id']
        }
        res = requests.post(const.PUBLIC_API + "/api/v2/exploit/get", data=param)
        return res.json()

@Exploit.route("/runshell", methods=['POST'])
@login_required
def run_shell_request(): 
    raw_id = {}
    raw_id['Input'] = []
    config_module = {}
    config_module['module'] = "ConfigSetup"
    config_module["_id"] = session['config_id']
    raw_id['Input'].append(config_module)
    if "Module_Exploit" in request.form: 
        target_module = {}
        target_module['module'] = "Module_Exploit"
        target_module['_id'] = request.form['Module_Exploit']
        raw_id['Input'].append(target_module)
    raw_id['Module'] = []
    raw_id['Module'].append("OutputShell")
    if "POC" in request.form: 
        raw_id["Priority"] = {}
        raw_id["Priority"]["EXPLOIT_POCS"] = {}
        raw_id["Priority"]["EXPLOIT_POCS"]["POC"] = request.form['POC']
    param = {
        "name": "test_running", 
        "input_raw_id": json.dumps(raw_id)
    }
    res = requests.post(const.PUBLIC_API + "/api/v2/module/run", data=param)
    return res.json()

@Exploit.route("/getshellstatus", methods=['GET'])
@login_required
def get_shell_status(): 
    if "process_id" in request.args: 
        param = {
            "_id": request.args['process_id']
        }
        res = requests.get(const.PUBLIC_API + "/api/v2/module/status", params=param)
        result = res.json()
        if(result['message'] == "success"): 
            temp = result['data']
            if(temp['Status'] != "StatusSuccess"): 
                return res.json()
            else: 
                data = {
                    "process_id": request.args['process_id']
                }
                res = requests.post(const.PUBLIC_API + "/api/v2/shell/getshelllogstatus",data=data)
                return res.json()
def get_data(config_id): 
        while True:
            data = {
            "config_id": config_id
            }
            res = requests.post(const.PUBLIC_API + "/api/v2/module/getconfig", data=data)
            result = res.json()
            shellServer = result["data"]['Cf_Server_OpenPort']
            shellPort = result['data']['Cf_PublicPort']
            param = {
                "port": shellPort, 
                "length": 4096 
            }
            res = requests.get(shellServer + "/receive", params=param)
            result = res.text.replace("\n", "\t")
            yield f'data:{result}\n\n'

@Exploit.route('/getshelldata', methods=['GET'])
@login_required
def get_shell_data_request(): 
    config_id = session['config_id']
    
    return Response(get_data(config_id), mimetype='text/event-stream; charset=utf-8')

@Exploit.route("/sendshelldata", methods=['POST'])
@login_required
def send_shell_command_request(): 
    if "cmd" in request.form: 
        message = request.form['cmd']
    config_id = session["config_id"]
    data = {
        "config_id": config_id
    }
    res = requests.post(const.PUBLIC_API + "/api/v2/module/getconfig", data=data)
    result = res.json()
    shellServer = result["data"]['Cf_Server_OpenPort']
    shellPort = result['data']['Cf_PublicPort']
    param = {
        "port": shellPort, 
        "message": message
    }
    res = requests.get(shellServer + "/send", params=param)
    return res.text



@Exploit.route("/closeshell", methods=['GET'])
@login_required
def send_close_shell_request(): 
    config_id = session["config_id"]
    data = {
        "config_id": config_id
    }
    res = requests.post(const.PUBLIC_API + "/api/v2/module/getconfig", data=data)
    result = res.json()
    shellServer = result["data"]['Cf_Server_OpenPort']
    shellPort = result['data']['Cf_PublicPort']
    param = {
        "port": shellPort, 
    }
    res = requests.get(shellServer + "/closeport", params=param)
    print(res.text)
    return res.text